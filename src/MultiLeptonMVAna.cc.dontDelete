#include "configana.h"
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <iterator>
#include <functional>
#include <numeric>
#include <string>
#include <climits>
#include <cassert>
#include <cstdlib>
#include <sstream>
#include <utility> 
#include <typeinfo>
#include <memory>

#include "TROOT.h"
#include "TSystem.h"
#include "TChain.h"
#include "TClonesArray.h"
#include "TCanvas.h"
#include "TFrame.h"
#include "TRandom.h"
#include "TStopwatch.h"
#include "TFile.h"
#include "TH1K.h"

#include "configana.h"
#include "LL4JMETUtil.h"
#include "MultiLeptonMVAna.h"


using std::cout;
using std::cerr;
using std::endl;
using std::string;
using std::ostringstream;
using std::vector;
using std::map;
using std::pair;
using std::setprecision;
using std::setw;

using namespace vhtm;

// -----------
// Constructor
// -----------
MultiLeptonMVAna::MultiLeptonMVAna()
  : PhysicsObjSelector()
   {}

// ----------
// Destructor
// ----------
MultiLeptonMVAna::~MultiLeptonMVAna() 
{
}
// -------------------------------------------------------
// Prepare for the run, do necessary initialisation etc.
// -------------------------------------------------------
bool MultiLeptonMVAna::beginJob() 
{ 
  if (!PhysicsObjSelector::beginJob()) return false;

  histf()->cd();
  histf()->mkdir("TMVAnalysis");
  
  bookHistograms();

  if (_createMVATree) {
    skimObj_ = std::make_unique <MVASkim> (_mvaInputFile);
    if (!skimObj_) return false;
  }

  else if (_readMVA) {
    _mvaObj = std::make_unique<MVAnalysis>(_MVAnetwork, _MVAxmlFile);
    if (!_mvaObj) return false;
  }

#ifdef  SKIP_DUPLICATE_ALL
  eventIdStore_.clear();
#endif

  return true;
}

// ---------------
// Book histograms
// ---------------
void MultiLeptonMVAna::bookHistograms()
{
  PhysicsObjSelector::bookHistograms();
  histf()->cd();
  histf()->cd("TMVAnalysis");

  // book histograms to be filled at different stages


  new TH1D("nvtx_0", "Number of Good vertices", 60, 0, 60);
  new TH1D("nvtx_1", "Number of Good vertices", 60, 0, 60);
  new TH1D("nvtx_2", "Number of Good vertices", 60, 0, 60);
  new TH1D("nvtx_3", "Number of Good vertices", 60, 0, 60);
  new TH1D("nvtx_4", "Number of Good vertices", 60, 0, 60);
  new TH1D("nvtx_5", "Number of Good vertices", 60, 0, 60);
  new TH1D("nvtx_6", "Number of Good vertices", 60, 0, 60);
  if (isMC()) {
    new TH1D("puweight", "PU reweight factor", 1000, -20., 20.);
    new TH1D("pu_evtWt", "PU nd Evt Wt", 1000, -20., 20.);
    new TH1D("evtweight", "Event weight factor (MC events)", 20, -10., 10.);
  }

  //------- Object PLots -----------------------------------------------
  
  new TH1D("evtCutFlow", "Event CutFlow", 24, -0.5, 23.5);
  if (isMC()) new TH1D("evtCutFlowWt", "Event CutFlow (Weighted)", 24, -0.5, 23.5);
  new TH1D("met", "Missing Transver Energy",200, 0, 200);
  new TH1D("corrmet", "Missing Transver Energy (CORR)", 600, 0., 400.);
  new TH1D("puppimet", "Missing Transver Energy (PUPPI)", 200, 0, 200);
  new TH1F("yield" ,"", 1, -0.5, 0.5);
  if (isMC()) new TH1F("yieldWt", "", 1, -0.5, 0.5);

  //For MVA FlatTree
  new TH1F("nTightJet_0" ,"", 10, -0.5, 9.5);
  new TH1F("nTightJet_1" ,"", 10, -0.5, 9.5);
  new TH1F("nTightJet_2" ,"", 10, -0.5, 9.5);
  new TH1F("nTightJet_3" ,"", 10, -0.5, 9.5);
  new TH1F("nTightJet_4" ,"", 10, -0.5, 9.5);
  new TH1F("nTightJet_5" ,"", 10, -0.5, 9.5);
  new TH1F("nTightJet_6" ,"", 10, -0.5, 9.5);

  new TH1F("TightJet1Pt" ,"", 300, 0., 300.0);
  new TH1F("TightJet2Pt" ,"", 300, 0., 300.0);
  new TH1F("nLepCand" ,"", 10, -0.5, 9.5);
  new TH1D("JetPairMass", "", 400, 0., 300.);

  new TH1F("jetsInvM" ,"", 600, 0., 1000.0);
  new TH1F("jetsInvM_3" ,"", 600, 0., 1000.0);
  new TH1F("jetsInvM_4" ,"", 600, 0., 1000.0);
  new TH1F("jetsInvM_5" ,"", 600, 0., 1000.0);
  new TH1F("jetsInvM_6" ,"", 600, 0., 1000.0);

  new TH1F("jetSumPt" ,"", 600, 0., 800.0);

  new TH1F("jetVecPt" ,"", 400, 0., 600.0);
  new TH1F("jetVecPt_3" ,"", 400, 0., 600.0);
  new TH1F("jetVecPt_4" ,"", 400, 0., 600.0);
  new TH1F("jetVecPt_5" ,"", 400, 0., 600.0);
  new TH1F("jetVecPt_6" ,"", 400, 0., 600.0);

  new TH1D("sameChLepMass", "", 200, 0., 300.);
  new TH1D("oppChLepMass", "", 200, 0., 300.);

  new TH1F("lep1Pt" ,"", 200, 0., 200.0);
  new TH1F("lep1Pt_10" ,"", 20, 0., 200.0);
  new TH1F("lep1Pt_4" ,"", 200, 0., 200.0);
  new TH1F("lep1Pt_5" ,"", 200, 0., 200.0);
  new TH1F("lep1Pt_6" ,"", 200, 0., 200.0);

  new TH1F("lep2Pt" ,"", 200, 0., 200.0);
  new TH1F("lepSumPt" ,"", 400, 0., 600.0);
  new TH1D("LTmet", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1F("lep1Eta" ,"", 100, -5., 5.0);
  new TH1F("lep2Eta" ,"", 100, -5., 5.0);
  new TH1F("lepSumCharge" ,"", 9, -4.5, 4.5);
  new TH1D("lep1MetDPhi", "", 100, -4., 4.);
  new TH1D("lep2MetDPhi", "", 100, -4., 4.);
  new TH1F("lepDR" ,"", 100, 0., 20.0);
  new TH1F("l1l2InvM" ,"", 400, 0., 400.0);

  new TH1F("jet1Pt" ,"", 200, 0., 200.0);
  new TH1F("jet2Pt" ,"", 200, 0., 200.0);
  new TH1F("jet3Pt" ,"", 200, 0., 200.0);
  new TH1F("jet4Pt" ,"", 200, 0., 200.0);
  new TH1F("jet5Pt" ,"", 200, 0., 200.0);
  new TH1F("jet1Eta" ,"", 200, -5., 5.0);
  new TH1F("jet2Eta" ,"", 200, -5., 5.0);
  new TH1F("jet3Eta" ,"", 200, -5., 5.0);
  new TH1F("jet4Eta" ,"", 200, -5., 5.0);
  new TH1F("jet5Eta" ,"", 200, -5., 5.0);
  new TH1F("j1l1dR" ,"", 100, 0., 20.0);
  new TH1F("j1l2dR" ,"", 100, 0., 20.0);
  new TH1F("j2l1dR" ,"", 100, 0., 20.0);
  new TH1F("j2l2dR" ,"", 100, 0., 20.0);
  new TH1F("j1j2dR" ,"", 100, 0., 20.0);
  new TH1D("higgsDR", "", 100, 0., 20.);
  new TH1F("J1HdR" ,"", 100, 0., 20.0);
  new TH1F("J2HdR" ,"", 100, 0., 20.0);
  new TH1D("sT", "", 1000, 0., 2000.);
  new TH1D("MET_SqrtST", "", 100, 0., 25.);
  new TH1D("nbJets", "", 10, -0.5, 9.5);
  new TH1D("nTau", "", 10, -0.5, 9.5);
  new TH1D("mvaOutput", "", 40, -1.0, 1.0);
  new TH1D("mT", "", 200, 0., 200.);
  new TH1D("jet1MetDPhi", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval", "", 100, 0., 1.1);

  new TH1D("diffFlvYield", "", 3, -0.5, 2.5);


  new TH1D("nvtx_PS", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_PS", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_PS" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_PS",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_PS", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_PS", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_PS",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_PS", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_PS", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_PS",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_PS", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_PS", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_PS",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_PS", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_PS", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_PS", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_PS", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_PS", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_PS", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_PS","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_PS","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_PS", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_PS","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_PS","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_PS", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_PS", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_PS", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_PS", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_PS", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_PS", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_PS", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_PS", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_PS", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_PS", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_PS", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_PS", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_PS", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_PS", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_PS", "", 100, 0., 1.1);

  new TH1D("sT_PS", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_PS", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_PS", "MET", 600, 0., 400.);


  new TH1D("nvtx_MVA1", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA1", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA1" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA1",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA1", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA1", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA1",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA1", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA1", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA1",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA1", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA1", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA1",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA1", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA1", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA1", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA1", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA1", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA1", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA1","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA1","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA1", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA1","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA1","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA1", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA1", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA1", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA1", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA1", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA1", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA1", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA1", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA1", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA1", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA1", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA1", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA1", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA1", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA1", "", 100, 0., 1.1);

  new TH1D("sT_MVA1", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA1", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA1", "MET", 600, 0., 400.);


  //MVA2

  new TH1D("nvtx_MVA2", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA2", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA2" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA2",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA2", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA2", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA2",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA2", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA2", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA2",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA2", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA2", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA2",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA2", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA2", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA2", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA2", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA2", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA2", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA2","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA2","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA2", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA2","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA2","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA2", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA2", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA2", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA2", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA2", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA2", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA2", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA2", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA2", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA2", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA2", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA2", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA2", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA2", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA2", "", 100, 0., 1.1);

  new TH1D("sT_MVA2", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA2", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA2", "MET", 600, 0., 400.);


  //MVA3

  new TH1D("nvtx_MVA3", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA3", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA3" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA3",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA3", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA3", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA3",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA3", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA3", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA3",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA3", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA3", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA3",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA3", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA3", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA3", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA3", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA3", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA3", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA3","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA3","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA3", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA3","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA3","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA3", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA3", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA3", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA3", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA3", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA3", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA3", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA3", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA3", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA3", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA3", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA3", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA3", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA3", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA3", "", 100, 0., 1.1);

  new TH1D("sT_MVA3", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA3", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA3", "MET", 600, 0., 400.);


  //MVA4

  new TH1D("nvtx_MVA4", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA4", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA4" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA4",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA4", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA4", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA4",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA4", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA4", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA4",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA4", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA4", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA4",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA4", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA4", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA4", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA4", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA4", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA4", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA4","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA4","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA4", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA4","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA4","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA4", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA4", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA4", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA4", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA4", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA4", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA4", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA4", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA4", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA4", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA4", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA4", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA4", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA4", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA4", "", 100, 0., 1.1);

  new TH1D("sT_MVA4", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA4", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA4", "MET", 600, 0., 400.);

  //MVA5

  new TH1D("nvtx_MVA5", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA5", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA5" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA5",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA5", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA5", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA5",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA5", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA5", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA5",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA5", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA5", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA5",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA5", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA5", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA5", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA5", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA5", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA5", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA5","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA5","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA5", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA5","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA5","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA5", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA5", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA5", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA5", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA5", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA5", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA5", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA5", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA5", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA5", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA5", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA5", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA5", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA5", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA5", "", 100, 0., 1.1);

  new TH1D("sT_MVA5", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA5", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA5", "MET", 600, 0., 400.);

  //MVA6

  new TH1D("nvtx_MVA6", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA6", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA6" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA6",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA6", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA6", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA6",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA6", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA6", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA6",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA6", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA6", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA6",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA6", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA6", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA6", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA6", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA6", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA6", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA6","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA6","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA6", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA6","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA6","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA6", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA6", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA6", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA6", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA6", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA6", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA6", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA6", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA6", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA6", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA6", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA6", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA6", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA6", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA6", "", 100, 0., 1.1);

  new TH1D("sT_MVA6", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA6", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA6", "MET", 600, 0., 400.);


  //MVA7

  new TH1D("nvtx_MVA7", "nPileUp_vertices", 60, 0., 60.);
  new TH1D("nTightJet_MVA7", "nJets",  10, -0.5, 9.5);
  new TH1F("nLepCand_MVA7" ,"", 10, -0.5, 9.5);
  new TH1D("jet1Pt_MVA7",  "Jet1 pT",  200, 0., 200.0);
  new TH1D("jet1Eta_MVA7", "Jet1 Eta", 100, -5.0, 5.0);
  new TH1D("jet1Phi_MVA7", "Jet1 Phi", 100, -4.0, 4.0);
  new TH1D("jet2Pt_MVA7",  "Jet2 Pt",  200, 0., 200.0);
  new TH1D("jet2Eta_MVA7", "Jet2 Eta", 100, -5.0, 5.0);
  new TH1D("jet2Phi_MVA7", "Jet2 Phi", 100, -4.0, 4.0);
  new TH1D("jet3Pt_MVA7",  "Jet3Pt",   200, 0., 200.0);
  new TH1D("jet3Eta_MVA7", "Jet3Eta",  100, -4.0, 4.0);
  new TH1D("jet3Phi_MVA7", "Jet3Phi",  100, -4.0, 4.0);
  new TH1D("jet4Pt_MVA7",  "Jet4Pt",   200, 0., 200.0);
  new TH1D("jet4Eta_MVA7", "Jet4Eta",  100, -5.0, 5.0);
  new TH1D("jet4Phi_MVA7", "Jet4Phi",  100, -4.0, 4.0);
  new TH1D("jetsInvM_MVA7", "4JetsInvMass", 600, 0., 1000.0);
  new TH1D("jetVecPt_MVA7", "hT", 400, 0., 600.);
  new TH1D("j1j2dR_MVA7", "DeltaR betn jet1 & jet2", 100, 0., 20.);
  new TH1D("lep1Pt_MVA7", "pT of leading lepton", 200, 0., 200.);
  new TH1D("lep1Eta_MVA7","Eta of leading lepton",100, -5.0, 5.0);
  new TH1D("lep1Phi_MVA7","Phi of leading lepton",100, -4.0, 4.0);
  new TH1D("lep2Pt_MVA7", "pT of subleading lepton", 200, 0., 200.);
  new TH1D("lep2Eta_MVA7","Eta of subleading lepton", 100, -5.0, 5.0);
  new TH1D("lep2Phi_MVA7","Phi of subleading lepton", 100, -4.0, 4.0);
  new TH1D("lepSumPt_MVA7", "lep1pT + lep2pT", 400, 0., 600.);
  new TH1D("LTmet_MVA7", "lep1pT + lep2pT + MissingET", 400, 0., 600.);
  new TH1D("lep1MetDPhi_MVA7", "Phi(lepton1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lep2MetDPhi_MVA7", "Phi(lepton2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("lepDR_MVA7", "DeltaR between lep1 & lep2", 100, 0., 20.);
  new TH1D("l1l2InvM_MVA7", "InvMass of 2leptons", 400, 0., 400.);

  new TH1D("j1l1dR_MVA7", "DeltaR between jet1 & lep1", 100, 0., 20.);
  new TH1D("j1l2dR_MVA7", "DeltaR between jet1 & lep2", 100, 0., 20.);
  new TH1D("j2l1dR_MVA7", "DeltaR between jet2 & lep1", 100, 0., 20.);
  new TH1D("j2l2dR_MVA7", "DeltaR between jet2 & lep2", 100, 0., 20.);
  new TH1D("mt1_MVA7", "Trans mass of lep1 & met", 500, 0., 600.);
  new TH1D("mt2_MVA7", "Trans mass of lep2 & met", 500, 0., 600.);
  new TH1D("jet1MetDPhi_MVA7", "Phi(jet1) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("jet2MetDPhi_MVA7", "Phi(jet2) - Phi(met)", 100, -4.0, 4.0);
  new TH1D("btagval_MVA7", "", 100, 0., 1.1);

  new TH1D("sT_MVA7", "sT", 1000, 0., 2000.);
  new TH1D("MET_SqrtST_MVA7", "MET over Sqrt of sT",100, 0., 25.);
  new TH1D("corrmet_MVA7", "MET", 600, 0., 400.);

  histf()->cd();
  histf()->ls();
}

// -------------------------------
// Clear vectors before event loop
// -------------------------------

void MultiLeptonMVAna::clearLists() {
  PhysicsObjSelector::clear();
  vtxList_.clear();
  LepCandList_.clear();
  JetPairSelected.clear();
  JetSelected.clear();
  SignalJetsSet.clear();
  SignalJets.clear();
}

// -------------------
// The main event loop
// -------------------

void MultiLeptonMVAna::eventLoop()
{
  int nPrint = std::max(10000, nEvents()/1000);
  
  Options op;
  op.verbose = false;
  op.usesbit = true;  // Crucial
  op.printselected = false;
  
  // --------------------
  // Start the event loop
  // --------------------
  string lastFile;
  int fevt = (firstEvent() > -1) ? firstEvent() : 0;
  int levt = (lastEvent() > -1) ? lastEvent() : nEvents();
  cout << ">>> Event range: [" << fevt << ", " << levt -1 << "]" << endl;
  int nEventSel = 0;
  //  TH1F *wtDiff = new TH1F ("wtDiff", "", 20, 0., 20.);  
 
  for (int ev = fevt; ev < levt; ++ev) {
    clearEvent(); // reset tree variables 
    clearLists(); // reset analysis related lists for each event
    int lflag = chain()->LoadTree(ev);
    int nbytes = getEntry(lflag);    // returns total bytes read
    string currentFile(gSystem->BaseName(chain()->GetCurrentFile()->GetName()));

    // For data or for MC without pileup
    double puevWt = 1; //for Data
#if 0
    if (isMC() && usePUWt()) {
      int npu = 0;
      puevWt = wtPileUp(npu);
    }
#endif
    // Show status of the run
    const Event& evt = eventColl()->at(0);            
    unsigned long run   = evt.run;
    unsigned long event = evt.event;
    unsigned long lumis = evt.lumis;
    
    // Show status of the run
    if (currentFile != lastFile)
      cout << "Tree# " << setw(4) << chain()->GetTreeNumber()
	   << " ==> " << chain()->GetCurrentFile()->GetName()
	   << " <<< Run# " << setw(8) << run
	   << " Lumis# " << setw(6) << lumis
	   << " Event# " << setw(12) << event << " >>> "
	   << " Events proc. " << setw(9) << ev << "(of " << setw(9) << levt-1 << ")"
	   << endl;
    lastFile = currentFile;
    
    // Show the status
    if (ev%nPrint == 0 || firstEvent() > -1)
      cout << "Tree# " << setw(4) << chain()->GetTreeNumber()
 	   << " ==> " << currentFile
	   << " <<< Run# " << setw(8) << run
	   << " Lumis# " << setw(6) << lumis
	   << " Event# " << setw(12) << event << " >>> "
	   << " Events proc. " << setw(8) << ((firstEvent() > -1) ? ev - firstEvent() : ev)
	   << endl;
    
    // Select a set of events by [run, event]
    if (useEventList_ && eventIdMap().size()) {
      std::ostringstream mkey;
      mkey << run << "-" << lumis << "-" << event;
      if (eventIdMap().find(mkey.str()) != eventIdMap().end()) continue;
    }
    
    histf()->cd();
    histf()->cd("TMVAnalysis");
    
    double wt = 1;
    if (isMC()) {
      AnaUtil::fillHist1D("puweight", puevWt);
      // only when exclusive jets datasets are used (for np = 0)
      if (0) std::cout << "== nMEPartons: " << genEventColl()->at(0).nMEPartons 
		       << ", lheNOutPartons: " << genEventColl()->at(0).lheNOutPartons 
		       << std::endl;
      if (selectPM_ && genEventColl()->at(0).nMEPartons != nMEPartons_) continue;

      //double wt = 1.0;
      //if (!isSignal()) wt = genEventColl()->size() ? genEventColl()->at(0).evtWeight : 1;
      wt = genEventColl()->size() ? genEventColl()->at(0).evtWeight : 1;
      //      AnaUtil::fillHist1D("evtweight", wt);      
      if (wt > 0.) wt = 1.0;
      else if (wt < 0.) wt = -1.0;
      else if (wt == 0.) wt = 0.0;
      AnaUtil::fillHist1D("evtweight", wt);      
      if (usePUWt()) {
	int npu = 0;
	puevWt  = wtPileUp(npu, false);
	AnaUtil::fillHist1D("puweight", puevWt);
	puevWt *= wt;
	AnaUtil::fillHist1D("pu_evtWt", puevWt);
      }
      evtWeightSum_ += wt;   // this is used for final normalization
    }

    /*  
#ifdef    SKIP_DUPLICATE_ALL
    // Duplicate event removal
    if (!isMC()) {
      std::ostringstream mkey;
      mkey << run << "-" << lumis << "-" << event;
      std::string evs(mkey.str());
      if (eventIdStore_.find(evs) != eventIdStore_.end()) {
	if (0) cout << "DuplicateAll: " << evs << endl;
	continue;
      }
      else {
	eventIdStore_.insert({evs, 1});
      }
    }
#endif

    if (!isMC()) {
#ifdef SKIP_DUPLICATE_IN_MEMORY
      std::ostringstream mkey;
      mkey << run << "-" << lumis << "-" << event;
      std::string evs {mkey.str()};
      if (eventIdStore_.find(evs) != eventIdStore_.end()) {
        if (0) cout << "DuplicateAll: " << evs << endl;
	continue;
      }
      else {
	eventIdStore_.insert({evs, 1});
      }
#endif
#ifdef SKIP_DUPLICATE_FROM_FILE
      if (skipDuplicate_) {
	std::ostringstream mkey;
        mkey << run << "-" << lumis << "-" << event;
	std::string evs {mkey.str()};
        if (eventIdStore_.find(evs) != eventIdStore_.end()) {
          if (0) cout << "Duplicate Event: " << evs << endl;
          continue;
        }
      }
      evLog() << run << " " << lumis << " " << event << std::endl;
#endif
    }
    */

    histf()->cd(); //required
    histf()->cd("TMVAnalysis");
    AnaUtil::fillHist1D("evtCutFlow", 0);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 0, puevWt);
    
    // at least 1 good PV
    // good vertex finding
    op.verbose = (logOption() >> 1 & 0x1);
    findVtxInfo(vtxList_, op, fLog());
    size_t ngoodVtx = vtxList_.size();
    AnaUtil::fillHist1D("nvtx_0", ngoodVtx, puevWt);
    if (ngoodVtx < 1) continue;

    AnaUtil::fillHist1D("evtCutFlow", 1);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 1, puevWt);


    AnaUtil::fillHist1D("isTriggered", (isTriggered(true, false)?1:0), puevWt); 
    
    // Is event triggered?
    if (0) dumpTriggerPaths(std::cout, true);
    if (useTrigger() && !isTriggered(true, false)) continue;
    
    AnaUtil::fillHist1D("evtCutFlow", 2);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 2, puevWt);
    
    //*********** M A I N  A N A L Y S I S  O B J E C T  S E L E C T I O N ************//
    double vz = (vtxList_.size() > 0) ? vtxList_.at(0).z : -999;
    findObjects(vz, 1); // do not use event weight
    

    //if (genAna_ != nullptr && dumpGenInfo_) genAna_->dumpEvent();
    //if (getFSRPhotonList().size()) dumpEvent(vz, false, true);

    // Access selected objects 
    const auto& elePhotonPairList = getTightIsoElePhotonPairList();
    int nEle = elePhotonPairList.size();

    const auto& muPhotonPairList  = getTightIsoMuPhotonPairList();
    int nMuon = muPhotonPairList.size();

    const auto& tauList = getIsoTauList();
    int nTau = tauList.size();
    
    const auto& TightJets = getTightJetList();
    //    int nTightJets = TightJets.size();
    
    //    const auto& LooseJets = getLooseJetList();
    
    //********************** A N A L Y S I S **********************//
    
    histf()->cd();//Required
    histf()->cd("TMVAnalysis");

    AnaUtil::fillHist1D("met", metColl()->at(0).met, puevWt);
    AnaUtil::fillHist1D("corrmet", corrmetColl()->at(0).met, puevWt);
    AnaUtil::fillHist1D("puppimet", puppimetColl()->at(0).met, puevWt);

    //P A C K I N G  L E P T O N S in LepCandList_
    if (nMuon > 0) packLeptons<vhtm::Muon>(muPhotonPairList, LepCandList_); 
    if (nEle > 0)  packLeptons<vhtm::Electron>(elePhotonPairList, LepCandList_);
    AnaUtil::fillHist1D("nLeptonCand", LepCandList_.size(), puevWt);

    addLeptonIsolation(LepCandList_, elePhotonPairList, muPhotonPairList); //add lepton isolation to lepcandidates    
    std::sort(std::begin(LepCandList_), std::end(LepCandList_), PtComparatorLep<LeptonCandidate>()); //sorting lepton candidates  
    histf()->cd();
    histf()->cd("TMVAnalysis");


    //_________________________________________PreSelection Begins_______________________________________________//

    const MET& mt = corrmetColl()->at(0);
    double mtPhi = mt.metphi;

    AnaUtil::fillHist1D("nTightJet_0", TightJets.size(), puevWt);
    if (TightJets.size() < 4) continue;
    AnaUtil::fillHist1D("evtCutFlow", 3);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 3, puevWt);

    AnaUtil::fillHist1D("TightJet1Pt", TightJets[0].pt, puevWt);
    AnaUtil::fillHist1D("TightJet2Pt", TightJets[1].pt, puevWt);
    if (TightJets[0].pt < 60) continue; //Jets are already sorted
    AnaUtil::fillHist1D("evtCutFlow", 4);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 4, puevWt);

    AnaUtil::fillHist1D("nLepCand", LepCandList_.size(), puevWt);
    if (LepCandList_.size() < 2) continue; //Lep candidates are already sorted
    AnaUtil::fillHist1D("evtCutFlow", 5);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 5, puevWt);



    AnaUtil::fillHist1D("nTightJet_1", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nvtx_1", ngoodVtx, puevWt);

    //jet pairs should reconstruct W Mass
    //    cout<<"ev no: "<<ev<<endl;
    for (size_t i1 = 0; i1 < TightJets.size(); ++i1){	
      const Jet& jet1 = TightJets.at(i1);
      TLorentzVector jet1p4 = LL4JMETUtil::getP4(jet1);
      for (size_t i2 = i1 + 1; i2 < TightJets.size(); ++i2) {
	const Jet& jet2 = TightJets.at(i2);
	TLorentzVector jet2p4 = LL4JMETUtil::getP4(jet2);
	double wMass = (jet1p4+jet2p4).M();
	AnaUtil::fillHist1D("JetPairMass", wMass, puevWt);
	//if (wMass > 20. && wMass < 140.) {
	if (wMass > 40. && wMass < 120.) {
	  //	  cout<<"Pt: "<<jet1.pt<<"\t"<<"Eta: "<<jet1.eta<<"\t"<<"Phi: "<<jet1.phi<<"\t"<<"Energy: "<<jet1.energy<<endl;
	  //  cout<<"Pt: "<<jet2.pt<<"\t"<<"Eta: "<<jet2.eta<<"\t"<<"Phi: "<<jet2.phi<<"\t"<<"Energy: "<<jet2.energy<<endl;
	  //JetPairSelected.push_back(std::make_pair (jet1, jet2));
	  SignalJetsSet.insert(jet1);
	  SignalJetsSet.insert(jet2);
	}
      }
    }
    // cout<<"+++++++++++++++++++++++++++++++"<<endl;
    //    cout<<"SetSize: "<<SignalJetsSet.size()<<endl;
    for (auto it : SignalJetsSet) {
      //cout<<"Pt: "<<it.pt<<"\t"<<"Eta: "<<it.eta<<"\t"<<"Phi: "<<it.phi<<"\t"<<"Energy: "<<it.energy<<endl;
      SignalJets.push_back(it);
    }

    if (SignalJets.size() < 4) continue;
    AnaUtil::fillHist1D("evtCutFlow", 6);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 6, puevWt);

    //if (!(SearchMinTwoUniqueJetPairs (JetPairSelected))) continue;
    
    AnaUtil::fillHist1D("evtCutFlow", 7);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 7, puevWt);

    AnaUtil::fillHist1D("nvtx_2", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_2", TightJets.size(), puevWt);

#if 0
    for (size_t i = 0; i < JetSelected.size(); ++i){
      auto& jet1 = JetSelected.at(i);
      TLorentzVector TL1 = LL4JMETUtil::getP4(jet1);
      for (size_t j = i+1; j < JetSelected.size(); ++j){
	auto& jet2 = JetSelected.at(j);
	TLorentzVector TL2 = LL4JMETUtil::getP4(jet2);
	if (TL1 == TL2) JetSelected.erase(JetSelected.begin() + j);
      }
    }
      
    for (size_t i = 0; i < JetSelected.size(); ++i){
      auto& jet1 = JetSelected.at(i);
      TLorentzVector TL1 = LL4JMETUtil::getP4(jet1);      
      for (size_t j = i+1; j < JetSelected.size(); ++j){
	auto& jet2 = JetSelected.at(j);
	TLorentzVector TL2 = LL4JMETUtil::getP4(jet2);      
	if (TL1 == TL2) JetSelected.erase(JetSelected.begin() + j);
      }
    }
    std::sort(std::begin(JetSelected), std::end(JetSelected), PtComparator<vhtm::Jet>());
#endif

    double sumPt=0.;
    TLorentzVector FourJetP4;
    FourJetP4.SetPtEtaPhiE(0.,0.,0.,0.);
    double bTagVal = 0.0;
    for (size_t i = 0; i < 4; ++i) {
      auto& jet = SignalJets[i];
      TLorentzVector jP4 = LL4JMETUtil::getP4(jet);
      sumPt += jP4.Pt();
      FourJetP4 += jP4;
      bTagVal = jet.pfCombinedInclusiveSecondaryVertexV2BJetTags;
      AnaUtil::fillHist1D("btagval", bTagVal, puevWt);
    }
    double Mass = FourJetP4.M();

    AnaUtil::fillHist1D("jetsInvM", Mass, puevWt);
    AnaUtil::fillHist1D("jetSumPt", sumPt, puevWt);
    AnaUtil::fillHist1D("jetVecPt", FourJetP4.Pt(), puevWt);

    //    if (Mass < 70 || Mass > 400) continue;
    if (Mass < 70 || Mass > 300) continue;
    AnaUtil::fillHist1D("evtCutFlow", 8);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 8, puevWt);

    AnaUtil::fillHist1D("nvtx_3", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_3", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_3", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_3", FourJetP4.Pt(), puevWt);


    if (hasZcandidate(LepCandList_, puevWt)) continue;
    AnaUtil::fillHist1D("evtCutFlow", 9);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 9, puevWt);


    TLorentzVector l1p4 = LepCandList_[0].lRP4;
    TLorentzVector l2p4 = LepCandList_[1].lRP4;
    double lep1c = LepCandList_[0].lCharge;
    double lep2c = LepCandList_[1].lCharge;
    double lep1pt = l1p4.Pt();
    double lep2pt = l2p4.Pt();
    double lep1eta = l1p4.Eta();
    double lep2eta = l2p4.Eta();
    double lep1phi = l1p4.Phi();
    double lep2phi = l2p4.Phi();
    double lSumPt = lep1pt + lep2pt;
    double LTmet = lSumPt+mt.met;
    double l1metDPhi = TVector2::Phi_mpi_pi(l1p4.Phi()-mt.metphi);
    double l2metDPhi = TVector2::Phi_mpi_pi(l2p4.Phi()-mt.metphi);

    double transMass = (l1p4+l2p4).Mt();
    double mt_l1met = TMath::Sqrt(2*lep1pt*(mt.met)*(1-TMath::Cos(l1metDPhi)));
    double mt_l2met = TMath::Sqrt(2*lep2pt*(mt.met)*(1-TMath::Cos(l2metDPhi)));

    AnaUtil::fillHist1D("lep1Pt", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Pt_10", lep1pt, wt);
    
    AnaUtil::fillHist1D("lep2Pt", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep2Eta", lep2eta, puevWt);
    AnaUtil::fillHist1D("lepSumCharge", (lep1c + lep2c), puevWt);
    AnaUtil::fillHist1D("lepSumPt", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi", l2metDPhi, puevWt);
    //    AnaUtil::fillHist1D("mT", transMass, puevWt);
    AnaUtil::fillHist1D("mt1", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2", mt_l2met, puevWt);


    if (lep1c*lep2c < 0.0) continue;
    AnaUtil::fillHist1D("evtCutFlow", 10);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 10, puevWt);

    //dumpEvent(vz, false, true); //dump in detail

    double Mass_2l = (l1p4 + l2p4).M();
    double dR = l1p4.DeltaR(l2p4);
    AnaUtil::fillHist1D("lepDR", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM", Mass_2l, puevWt);

    if (!(lep1pt > 30 && lep2pt > 15)) continue;
    AnaUtil::fillHist1D("evtCutFlow", 11);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 11, puevWt);

    if (Mass_2l < 10 || Mass_2l > 130) continue;
    AnaUtil::fillHist1D("evtCutFlow", 12);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 12, puevWt);

    AnaUtil::fillHist1D("nvtx_4", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_4", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_4", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_4", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("lep1Pt_4", lep1pt, puevWt);


    TLorentzVector j1P4 = LL4JMETUtil::getP4(SignalJets[0]);
    TLorentzVector j2P4 = LL4JMETUtil::getP4(SignalJets[1]);
    TLorentzVector j3P4 = LL4JMETUtil::getP4(SignalJets[2]);
    TLorentzVector j4P4 = LL4JMETUtil::getP4(SignalJets[3]);
    AnaUtil::fillHist1D("jet1Pt", j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Pt", j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta", j2P4.Eta(), puevWt);
    double j1l1dR_ = j1P4.DeltaR(l1p4);
    double j1l2dR_ = j1P4.DeltaR(l2p4);
    double j2l1dR_ = j2P4.DeltaR(l1p4);
    double j2l2dR_ = j2P4.DeltaR(l2p4);
    AnaUtil::fillHist1D("j1l1dR", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR", j2l2dR_, puevWt);

    AnaUtil::fillHist1D("jet3Pt", j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Pt", j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta", j4P4.Eta(), puevWt);

    if (SignalJets.size() > 4) {
      AnaUtil::fillHist1D("jet5Pt", (LL4JMETUtil::getP4(SignalJets[4])).Pt(), puevWt);
      AnaUtil::fillHist1D("jet5Eta", (LL4JMETUtil::getP4(SignalJets[4])).Eta(), puevWt);
    }
    double j1metDPhi = TVector2::Phi_mpi_pi(j1P4.Phi()-mt.metphi);
    double j2metDPhi = TVector2::Phi_mpi_pi(j2P4.Phi()-mt.metphi);
    AnaUtil::fillHist1D("jet1MetDPhi", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi", j2metDPhi, puevWt);



    double jetDR = j1P4.DeltaR(j2P4);
    AnaUtil::fillHist1D("j1j2dR", jetDR, puevWt);

    double hDR = (l1p4+l2p4).DeltaR(FourJetP4);
    AnaUtil::fillHist1D("higgsDR", hDR, puevWt);

    double jet1hDR = j1P4.DeltaR(FourJetP4);
    double jet2hDR = j2P4.DeltaR(FourJetP4);
    AnaUtil::fillHist1D("J1HdR", jet1hDR, puevWt);
    AnaUtil::fillHist1D("J2HdR", jet2hDR, puevWt);

    double sT = (j1P4.Pt() + j2P4.Pt() + j3P4.Pt() + j4P4.Pt() + l1p4.Pt() + l2p4.Pt() + mt.met);
    AnaUtil::fillHist1D("sT", sT, puevWt);

    double metSqrtST = (mt.met)/TMath::Sqrt(sT);
    AnaUtil::fillHist1D("MET_SqrtST", metSqrtST, puevWt);

    AnaUtil::fillHist1D("nbJets", nbJets(), puevWt);
    if (nbJets() > 0) continue; //Signal has no b-jet
    AnaUtil::fillHist1D("evtCutFlow", 13);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 13, puevWt);

    AnaUtil::fillHist1D("nTau", nTau, puevWt);
    if (nTau > 0) continue;
    AnaUtil::fillHist1D("evtCutFlow", 14);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 14, puevWt);

    if (mt.met <30) continue; //Signal has high met
    AnaUtil::fillHist1D("evtCutFlow", 15);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 15, puevWt);

    AnaUtil::fillHist1D("nvtx_PS", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_PS", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_PS", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_PS",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_PS", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_PS", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_PS",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_PS", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_PS", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_PS",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_PS", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_PS", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_PS",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_PS", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_PS", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_PS", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_PS", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_PS", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_PS", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_PS", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_PS", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_PS", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_PS", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_PS", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_PS", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_PS", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_PS", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_PS", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_PS", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_PS", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_PS", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_PS", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_PS", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_PS", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_PS", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_PS", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_PS", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_PS", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_PS", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_PS", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_PS", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_PS", mt.met, puevWt);

    dumpEvent(vz, false, true); //dump in detail

    if (LepCandList_[0].flavour == 1 && LepCandList_[1].flavour == 1) AnaUtil::fillHist1D("diffFlvYield", 0.0);
    else if ((LepCandList_[0].flavour == 1 && LepCandList_[1].flavour == 2)||(LepCandList_[0].flavour == 2 && LepCandList_[1].flavour == 1)) AnaUtil::fillHist1D("diffFlvYield", 1.0);
    else if (LepCandList_[0].flavour == 2 && LepCandList_[1].flavour == 2) AnaUtil::fillHist1D("diffFlvYield", 2.0);




    //_________________________________________End of PreSelection_______________________________________________//    
      
    histf()->cd();

    //_____________________________________________MVA Skimming__________________________________________________//    

    if (skimObj_) {
      TreeVariables varList;
      varList.nLep         = LepCandList_.size();
      varList.nJet         = SignalJets.size();
      varList.lep1Eta      = lep1eta;
      varList.lep1Pt       = lep1pt;
      varList.lep2Eta      = lep2eta;
      varList.lep2Pt       = lep2pt;
      varList.lepSumPt     = lSumPt;
      varList.LTmet        = LTmet;
      varList.lepSumCharge = (lep1c + lep2c);
      varList.lepDR        = dR;
      varList.met          = mt.met;
      varList.MetPhi       = mtPhi;
      varList.MetL1dPhi    = l1metDPhi;
      varList.MetL2dPhi    = l2metDPhi;
      varList.MetJ1dPhi    = j1metDPhi;
      varList.MetJ2dPhi    = j2metDPhi;
      varList.TrMass1      = mt_l1met;
      varList.TrMass2      = mt_l2met;
      varList.jet1Pt       = j1P4.Pt();
      varList.jet2Pt       = j2P4.Pt();
      varList.jet1Eta      = j1P4.Eta();
      varList.jet2Eta      = j1P4.Eta();
      varList.jetSumPt     = sumPt;
      varList.jetSumVecPt  = FourJetP4.Pt();
      varList.j1l1dR       = j1l1dR_;
      varList.j1l2dR       = j1l2dR_;
      varList.j2l1dR       = j2l1dR_;
      varList.j2l2dR       = j2l2dR_;
      varList.j1j2dR       = jetDR;
      varList.bTagVal      = bTagVal;
      varList.h1h2dR       = hDR;
      varList.HJ1dR        = jet1hDR;
      varList.HJ2dR        = jet2hDR;
      varList.l1l2InvM     = Mass_2l;
      varList.jetsInvM     = Mass;
      varList.METsqrtST    = metSqrtST;
      varList.ST           = sT;
 
      skimObj_->fill(varList);
    }

    //_________________________________________MVA Evaluation_______________________________________________//    
      
    histf()->cd();     
    double mvaOut = -999.9;


    if (_readMVA) {
      InputVariables varlist;
      //      varlist.lep1Eta = lep1eta;
      //      varlist.lep2Eta = lep2eta;
      varlist.LTmet        = LTmet;
      varlist.lepDR        = dR;
      //varlist.met = mt.met;
      varlist.MetL1dPhi    = l1metDPhi;
      varlist.MetL2dPhi    = l2metDPhi;
      //varList.MetJ1dPhi    = j1metDPhi;
      varlist.MetJ2dPhi    = j2metDPhi;
      //
      // varList.TrMass2      = mt_l2met;
    
      //      varlist.TrMass   = transMass;
      varlist.jetSumVecPt = FourJetP4.Pt();
      //varlist.lepOjetPt = lSumPt/sumPt;
      varlist.j1l1dR = j1l1dR_;
      //varlist.j1l2dR = j1l2dR_;
      //varlist.j2l1dR = j2l1dR_;
      //varlist.j2l2dR = j2l2dR_; 
      varlist.j1j2dR = jetDR;
      //varlist.HJ1dR  = jet1hDR;
      //varlist.HJ2dR  = jet2hDR;
      varlist.l1l2InvM = Mass_2l;
      //varlist.jetsInvM = Mass;
      //      varlist.hToverMET = hTMET;
      //varlist.mt1 = TMath::Sqrt(2*lep1pt*(mt.met)*(1-TMath::Cos(l1metDPhi)));
      //varlist.mt2 = TMath::Sqrt(2*lep2pt*(mt.met)*(1-TMath::Cos(l2metDPhi)));
      varlist.TrMass1      = mt_l1met;
      //varlist.lep1Eta =  LepCandList_.at(0).lEta;
      //varlist.lep2Eta = LepCandList_.at(1).lEta;
      //varlist.nJet    = TightJets.size();
      mvaOut = _mvaObj->evaluate(_MVAnetwork, varlist);
    }

    histf()->cd();
    histf()->cd("TMVAnalysis");
    
    AnaUtil::fillHist1D ("mvaOutput", mvaOut, puevWt);    
   
    if (mvaOut < -0.06) continue;
    AnaUtil::fillHist1D("evtCutFlow", 16);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 16);

    if (mvaOut < -0.05) continue;  //Highest Significance
    AnaUtil::fillHist1D("evtCutFlow", 17);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 17);

    AnaUtil::fillHist1D("nvtx_MVA1", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA1", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA1", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA1",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA1", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA1", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA1",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA1", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA1", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA1",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA1", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA1", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA1",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA1", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA1", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA1", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA1", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA1", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA1", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA1", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA1", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA1", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA1", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA1", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA1", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA1", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA1", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA1", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA1", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA1", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA1", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA1", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA1", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA1", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA1", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA1", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA1", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA1", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA1", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA1", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA1", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA1", mt.met, puevWt);



    if (mvaOut < -0.04) continue;
    AnaUtil::fillHist1D("evtCutFlow", 18);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 18);

    AnaUtil::fillHist1D("nvtx_MVA2", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA2", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA2", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA2",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA2", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA2", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA2",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA2", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA2", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA2",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA2", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA2", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA2",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA2", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA2", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA2", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA2", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA2", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA2", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA2", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA2", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA2", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA2", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA2", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA2", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA2", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA2", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA2", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA2", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA2", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA2", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA2", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA2", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA2", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA2", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA2", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA2", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA2", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA2", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA2", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA2", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA2", mt.met, puevWt);

    
    if (mvaOut < -0.035) continue;
    AnaUtil::fillHist1D("evtCutFlow", 19);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 19);


    AnaUtil::fillHist1D("nvtx_MVA3", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA3", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA3", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA3",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA3", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA3", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA3",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA3", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA3", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA3",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA3", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA3", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA3",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA3", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA3", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA3", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA3", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA3", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA3", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA3", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA3", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA3", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA3", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA3", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA3", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA3", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA3", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA3", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA3", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA3", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA3", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA3", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA3", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA3", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA3", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA3", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA3", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA3", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA3", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA3", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA3", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA3", mt.met, puevWt);


    if (mvaOut < -0.03) continue;
    AnaUtil::fillHist1D("evtCutFlow", 20);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 20);

    AnaUtil::fillHist1D("nvtx_MVA4", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA4", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA4", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA4",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA4", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA4", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA4",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA4", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA4", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA4",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA4", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA4", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA4",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA4", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA4", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA4", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA4", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA4", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA4", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA4", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA4", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA4", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA4", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA4", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA4", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA4", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA4", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA4", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA4", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA4", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA4", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA4", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA4", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA4", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA4", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA4", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA4", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA4", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA4", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA4", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA4", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA4", mt.met, puevWt);


    if (mvaOut < -0.025) continue;
    AnaUtil::fillHist1D("evtCutFlow", 21);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 21);

    AnaUtil::fillHist1D("nvtx_MVA5", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA5", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA5", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA5",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA5", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA5", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA5",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA5", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA5", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA5",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA5", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA5", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA5",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA5", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA5", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA5", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA5", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA5", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA5", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA5", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA5", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA5", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA5", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA5", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA5", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA5", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA5", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA5", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA5", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA5", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA5", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA5", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA5", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA5", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA5", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA5", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA5", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA5", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA5", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA5", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA5", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA5", mt.met, puevWt);


    if (mvaOut < -0.02) continue;
    AnaUtil::fillHist1D("evtCutFlow", 22);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 22);

    AnaUtil::fillHist1D("nvtx_MVA6", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA6", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA6", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA6",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA6", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA6", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA6",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA6", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA6", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA6",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA6", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA6", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA6",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA6", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA6", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA6", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA6", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA6", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA6", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA6", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA6", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA6", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA6", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA6", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA6", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA6", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA6", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA6", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA6", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA6", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA6", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA6", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA6", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA6", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA6", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA6", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA6", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA6", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA6", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA6", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA6", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA6", mt.met, puevWt);


    if (mvaOut < -0.01) continue;
    AnaUtil::fillHist1D("evtCutFlow", 23);
    if (isMC()) AnaUtil::fillHist1D("evtCutFlowWt", 23);


    AnaUtil::fillHist1D("nvtx_MVA7", ngoodVtx, puevWt);
    AnaUtil::fillHist1D("nTightJet_MVA7", TightJets.size(), puevWt);
    AnaUtil::fillHist1D("nLepCand_MVA7", LepCandList_.size(), puevWt);
    AnaUtil::fillHist1D("jet1Pt_MVA7",  j1P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet1Eta_MVA7", j1P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet1Phi_MVA7", j1P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet2Pt_MVA7",  j2P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet2Eta_MVA7", j2P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet2Phi_MVA7", j2P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet3Pt_MVA7",  j3P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet3Eta_MVA7", j3P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet3Phi_MVA7", j3P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jet4Pt_MVA7",  j4P4.Pt(), puevWt);
    AnaUtil::fillHist1D("jet4Eta_MVA7", j4P4.Eta(), puevWt);
    AnaUtil::fillHist1D("jet4Phi_MVA7", j4P4.Phi(), puevWt);
    AnaUtil::fillHist1D("jetsInvM_MVA7", Mass, puevWt);
    AnaUtil::fillHist1D("jetVecPt_MVA7", FourJetP4.Pt(), puevWt);
    AnaUtil::fillHist1D("j1j2dR_MVA7", jetDR, puevWt);
    AnaUtil::fillHist1D("btagval_MVA7", bTagVal, puevWt);
    AnaUtil::fillHist1D("lep1Pt_MVA7", lep1pt, puevWt);
    AnaUtil::fillHist1D("lep1Eta_MVA7", lep1eta, puevWt);
    AnaUtil::fillHist1D("lep1Phi_MVA7", lep1phi, puevWt);
    AnaUtil::fillHist1D("lep2Pt_MVA7", lep2pt, puevWt);
    AnaUtil::fillHist1D("lep2Eta_MVA7", lep2eta, puevWt);
    AnaUtil::fillHist1D("lep2Phi_MVA7", lep2phi, puevWt);
    AnaUtil::fillHist1D("lepSumPt_MVA7", lSumPt, puevWt);
    AnaUtil::fillHist1D("LTmet_MVA7", LTmet, puevWt);
    AnaUtil::fillHist1D("lep1MetDPhi_MVA7", l1metDPhi, puevWt);
    AnaUtil::fillHist1D("lep2MetDPhi_MVA7", l2metDPhi, puevWt);
    AnaUtil::fillHist1D("lepDR_MVA7", dR, puevWt);
    AnaUtil::fillHist1D("l1l2InvM_MVA7", Mass_2l, puevWt);

    AnaUtil::fillHist1D("j1l1dR_MVA7", j1l1dR_, puevWt);
    AnaUtil::fillHist1D("j1l2dR_MVA7", j1l2dR_, puevWt);
    AnaUtil::fillHist1D("j2l1dR_MVA7", j2l1dR_, puevWt);
    AnaUtil::fillHist1D("j2l2dR_MVA7", j2l2dR_, puevWt);
    AnaUtil::fillHist1D("mt1_MVA7", mt_l1met, puevWt);
    AnaUtil::fillHist1D("mt2_MVA7", mt_l2met, puevWt);
    AnaUtil::fillHist1D("jet1MetDPhi_MVA7", j1metDPhi, puevWt);
    AnaUtil::fillHist1D("jet2MetDPhi_MVA7", j2metDPhi, puevWt);

    AnaUtil::fillHist1D("sT_MVA7", sT, puevWt);
    AnaUtil::fillHist1D("MET_SqrtST_MVA7", metSqrtST, puevWt);
    AnaUtil::fillHist1D("corrmet_MVA7", mt.met, puevWt);

    //--------------------------------------some cuts after applying BDT score----------------------------------------//
    
    

    //-----------------------------------------------------------------------------------------------------------------//

    //    AnaUtil::fillHist1D("yield", 0);
    //    if (isMC()) AnaUtil::fillHist1D("yieldWt", 0);

    // selEvLog() << run << " " << lumis << " " << event << std::endl;
    evLog() << run << " " << lumis << " " << event << std::endl;

    // Print only the first n events; n configurable
    if (isMC() && dumpEventCount_ > -1 && ++nEventSel >= dumpEventCount_) continue;
    cout << ">>> "
         << "<nLooseMuon>: " << getLooseMuList().size()
         << ", <nMuon>: " << muPhotonPairList.size()
         << ", <nLooseElectron>: " << getLooseEleList().size()
         << ", <nElectron>: " << elePhotonPairList.size()
         << ", <nTau>: " << tauList.size()
         << ", <nTightJets> " << TightJets.size()
	 << endl;

    //dumpEvent(vz, false, true);
  }
  //TCanvas *c = new TCanvas("c", "c", 600, 400);
  //wtDiff -> Draw();
  //c->Update();
  //c->SaveAs("WtDiff.png");
  // Analysis over
}

bool MultiLeptonMVAna::SearchMinTwoUniqueJetPairs(const std::vector<std::pair<vhtm::Jet, vhtm::Jet>>& JetPair) {
  for (size_t i = 0; i < JetPair.size(); ++i){
    auto& pair1 = JetPair.at(i);
    TLorentzVector j1p4 = LL4JMETUtil::getP4(pair1.first);
    TLorentzVector j2p4 = LL4JMETUtil::getP4(pair1.second);
    for (size_t j = i+1; j < JetPair.size(); ++j){
      auto& pair2 = JetPair.at(j);
      TLorentzVector j3p4 = LL4JMETUtil::getP4(pair2.first);
      TLorentzVector j4p4 = LL4JMETUtil::getP4(pair2.second);
      if (j1p4 != j3p4 && j1p4 != j4p4 && j2p4 != j3p4 && j2p4 != j4p4)	return true;
    }
  }
  return false;
}

bool MultiLeptonMVAna::hasZcandidate(const std::vector<LeptonCandidate>& lepColl, double puWt){
  bool hasZToLL {false};
  bool hasZMass {false};
  for (size_t i = 0; i < lepColl.size(); ++i){
    auto& lep1 = lepColl.at(i);
    TLorentzVector TL1 = lep1.lRP4;
    double l1c = lep1.lCharge;
    for (size_t j = i+1; j < lepColl.size(); ++j){
      auto& lep2 = lepColl.at(j);
      TLorentzVector TL2 = lep2.lRP4;
      double l2c = lep2.lCharge;
      double lepInvM = (TL1+TL2).M();
      
      if(lep1.flavour == lep2.flavour){
	if (l1c * l2c < 0.0) {
	  AnaUtil::fillHist1D("oppChLepMass", lepInvM, puWt);
	  if (lepInvM > 40 && lepInvM < 140)  hasZToLL = true;
  	}
	else if (l1c * l2c > 0.0) {
	  AnaUtil::fillHist1D("sameChLepMass", lepInvM, puWt);
	  if (lepInvM > 85. && lepInvM < 100.) hasZMass = true;
	}
      }
      if (hasZToLL||hasZMass) return true;
    }
  }
  return false;
}

void MultiLeptonMVAna::endJob() {
  PhysicsObjSelector::endJob();
  
  histf()->cd();
  histf()->cd("TMVAnalysis");
  vector<string> evLabels {
      "0) Events processed: ",
      "1) Have good Vtx: ",
      "2) triggered: ",
      "3) nTightJet >= 4: ",
      "4) Jet1pT >= 60: ",
      "5) nTightIsoLep >= 2:",
      "6) Min4 Jets Forming W/Z:",
      "7) Same cut: ",
      "8) 4 final jets form H*:",
      "9) has no Z candidate: ",
      "10)same chr leptons:",
      "11)lep1Pt > 30 & lep2Pt > 15: ",
      "12)10 < LepInvMass < 130: ",
      "13)no b jets: ",
      "14)no Tau: ",
      "15)met > 30: ",
	"16)Passing MVA >= -0.06: ",
	"17)Passing MVA >= -0.05 (Sig:26.56): ",
	"18)Passing MVA >= -0.04: ",
	"19)Passing MVA >= -0.035: ",
	"20)Passing MVA >= -0.03: ",
	"21)Passing MVA >= -0.025: ",
	"22)Passing MVA >= -0.02: ",
	"22)Passing MVA >= -0.01: "
      };
  LL4JMETUtil::showEfficiency("evtCutFlow", evLabels, "Event Selection");  

  double lumiFac = 1.0;
  if (isMC()) {
    lumiFac = lumiWt(evtWeightSum_);
    cout << endl
         << "evtWeightSum: " << setw(10) << setprecision(0) << evtWeightSum_ << endl
         << "      lumiWt: " << setw(10) << setprecision(5) << lumiFac
         << endl;
  }

  if (isMC()) {
    //cout<<"LumiFac: "<<lumiFac<<endl; ////////////////////////////////////////
    LL4JMETUtil::scaleHistogram("evtCutFlowWt", lumiFac);
    LL4JMETUtil::showEfficiency("evtCutFlowWt", evLabels, "Event Selection (Weighted)", "Events");  
  }
}

void MultiLeptonMVAna::closeFiles() {
  AnaBase::closeFiles();
  // Take care of local stuff first                                                
  //  if (_mvaObj != nullptr) _mvaObj->close();
  if (skimObj_ != nullptr) skimObj_->close();
  if (syncDumpf_.is_open()) syncDumpf_.close();
}


// -------------------------------------------------------------------------------
// Poor man's way of a datacard. Each line between the 'START' and 'END' tags
// is read in turn, split into words, where the first element is the 'key' and
// the rest the value(s). If more than one values are present they are 
// stored in a vector. No safety mechanism is in place. Any line with an unknown 
// key is skipped. Comments lines should start with either '#' or '//', preferably
// in the first column. Empty lines are skipped. The file containing the datacards 
// is passed as the only argument of the program, there is no default
// -------------------------------------------------------------------------------
bool MultiLeptonMVAna::readJob(const string& jobFile, int& nFiles)
{
  if (!PhysicsObjSelector::readJob(jobFile, nFiles)) return false;
  
  // Open the same file containing the datacards again to read analysis specific cards
  ifstream fin(jobFile.c_str(), std::ios::in);    
  if (!fin) {
    cerr << "==> Input File: " << jobFile << " could not be opened!" << endl;
    return false;
  }
  
  eventFilelist_.clear();  

  static constexpr int BUF_SIZE = 256;
  char buf[BUF_SIZE];
  while (fin.getline(buf, BUF_SIZE, '\n')) {  // Pops off the newline character
    string line(buf);
    if (line.empty() || line == "START") continue;   
    
    // enable '#' and '//' style comments
    if (line.substr(0,1) == "#" || line.substr(0,2) == "//") continue;
    if (line == "END") break;
    
    // Split the line into words
    vector<string> tokens;
    AnaUtil::tokenize(line, tokens);
    std::cout << line << std::endl;
    assert(tokens.size() > 1);
    const string& key   = tokens[0];
    const string& value = tokens[1];
    if (key == "useEventList")
      useEventList_ = std::stoi(value.c_str()) > 0 ? true : false;
    else if (key == "skipDuplicate")
      skipDuplicate_ = std::stoi(value.c_str()) > 0 ? true : false;
    else if (key == "dumpGenInfo")
      dumpGenInfo_ = std::stoi(value.c_str()) > 0 ? true : false;
    else if (key == "inputEventFile")
      eventFilelist_.push_back(value.c_str());
    else if (key == "syncDumpFile")
      dumpFilename_ = value.c_str();
    else if (key == "dumpEventMax")
      dumpEventCount_ = std::stoi(value.c_str());
    else if (key == "selectPartons")
      selectPM_ = std::stoi(value.c_str()) > 0 ? true : false;
    else if (key == "nMEPartons")
      nMEPartons_ = std::stoi(value.c_str());
    else if (key == "readMVA")
      _readMVA = (atoi(value.c_str()) > 0) ? true : false;
    //else if (key == "mvaInputFile")
    // _mvaInputFile = value;
    else if (key == "MVAnetwork")
      _MVAnetwork = value;
    else if (key == "MVAxmlFile")
      _MVAxmlFile = value;
    else if (key == "createMVATree")
      _createMVATree = (atoi(value.c_str()) > 0) ? true : false;
    else if (key == "mvaInputFile")
      _mvaInputFile = value;
  }
  // Close the file
  fin.close();
  
  if (!dumpFilename_.empty()) {
    syncDumpf_.open(dumpFilename_, std::ios::out);
    if (!syncDumpf_) {
      cerr << "Output File: " << dumpFilename_ << " could not be opened!" << endl;
      return false;
    }
  }  
  /*
#ifdef SKIP_DUPLICATE_FROM_FILE
  if (skipDuplicate_ && !eventFilelist_.empty()) {
    eventMap_.clear();
    for (const auto& f: eventFilelist_) {
      cout << ">>> Reading file: " << f << endl;
      ifstream fin(f, std::ios::in);
      if (!fin) {
	cerr << "Input file: " << f << " could not be opened!" << endl;
	continue;
      }
      char buf[BUF_SIZE];
      vector<string> tokens;
      while (fin.getline(buf, BUF_SIZE, '\n')) {  // Pops off the newline character
	string line(buf);
	if (line.empty()) continue;   
	
	// enable '#' and '//' style comments
	if (line.substr(0,1) == "#" || line.substr(0,2) == "//") continue;
    
	// Split the line into words
	//AnaUtil::tokenize(line, tokens);
	assert(tokens.size() > 2);
	string key = tokens.at(0) + "-" + tokens.at(1) + "-" + tokens.at(2);
	eventMap_.insert({key, 1});

	tokens.clear();
      }
      // Close the file
      fin.close();
    }
    cout << ">>> Total events present: " << eventMap_.size() << endl;
  } 
  #endif
  */
  printJob();
  
  //if (readGenInfo()) genAna_ = std::make_unique<GenAnalysis>();
  //return true;
}
void MultiLeptonMVAna::printJob(ostream& os) const
{
  AnaBase::printJob(os);
  os << endl;
  os << "   useEventList: " << std::boolalpha << useEventList_ << endl
     << "  skipDuplicate: " << std::boolalpha << skipDuplicate_ << endl
     << " dumpEventCount: " << dumpEventCount_ << endl
     << "   syncDumpFile: " << dumpFilename_ << endl
     << "   dumpEventMax: " << dumpEventCount_ << endl
     << "  selectPartons: " << std::boolalpha << selectPM_ << endl
     << "     nMEPartons: " << nMEPartons_ << endl;
  //  if (isMC()) 
  //  os << "    dumpGenInfo: " << std::boolalpha << dumpGenInfo_ << endl;

  //AnaUtil::showList(eventFilelist_, ">>> INFO. Input event files:", os);
}
