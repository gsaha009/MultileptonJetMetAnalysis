#include "configana.h"
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <iterator>
#include <functional>
#include <numeric>
#include <string>
#include <climits>
#include <cassert>
#include <cstdlib>
#include <sstream>

#include "TROOT.h"
#include "TSystem.h"
#include "TChain.h"
#include "TClonesArray.h"
#include "TFrame.h"
#include "TRandom.h"
#include "TStopwatch.h"
#include "TFile.h"
#include "TH1K.h"
#include "TH1.h"
#include "TH2.h"
#include "TProfile.h"

#include "MuonIsolation.h"
#include "AnaUtil.h"
#include "PhysicsObjects.h"

using std::cout;
using std::cerr;
using std::endl;
using std::string;
using std::ostringstream;
using std::vector;
using std::map;
using std::pair;
using std::abs;
using std::max;
using std::sqrt;
using std::sort;
using std::setprecision;
using std::setw;

using namespace vhtm;

// -----------
// Constructor
// -----------
MuonIsolation::MuonIsolation()
  : AnaBase(),
    _dumpEvent(false)
{
}
// ----------
// Destructor
// ----------
MuonIsolation::~MuonIsolation() 
{}
// -------------------------------------------------------
// Prepare for the run, do necessary initialisation etc.
// -------------------------------------------------------
bool MuonIsolation::beginJob() 
{ 
  AnaBase::beginJob();

  // Open the output ROOT file
  histf()->cd();
  bookHistograms();

  return true;
}
// ---------------
// Book histograms
// ---------------
void MuonIsolation::bookHistograms() 
{
 new TH1D("nGoodvtx","Number of Vertices",50,0,50);
 new TH1D("nRecomuon","Number of Reconstructed Muons(without cut)",20,0,20);
 new TH1D("nGoodmuon","Number of Good Muons(with selection cuts)",20,0,20);
 new TH1F("muon1Pt", "Pt of muon", 150, 0., 150.);
 new TProfile("muPtvsnVtx", "Muon Pt vs nVertex", 80, 0, 80, 0.,150.);
// new TH1F("muon1Pt", "Pt of sub-leading muon", 150, 0., 150.);
 new TH1F("muon1Eta", "Eta of muon", 30, -3., 3.);
//Charged Isolation
 new TH1F("muonChIso_015","Muon Charged Isolation for cone size 0.15",100,0.,10.);
 new TH1F("muonChIso_020","Muon Charged Isolation for cone size 0.20",100,0.,10.);
 new TH1F("muonChIso_025","Muon Charged Isolation for cone size 0.25",100,0.,10.);
 new TH1F("muonChIso_030","Muon Charged Isolation for cone size 0.30",100,0.,10.);
 new TH1F("muonChIso_035","Muon Charged Isolation for cone size 0.35",100,0.,10.);
 new TH1F("muonChIso_040","Muon Charged Isolation for cone size 0.40",100,0.,10.);
 new TH1F("muonChIso_045","Muon Charged Isolation for cone size 0.45",100,0.,10.);
//Neutral Isolation
 new TH1F("muonNIso_015","Muon Neutral Isolation for cone size 0.15",100,0.,10.);
 new TH1F("muonNIso_020","Muon Neutral Isolation for cone size 0.20",100,0.,10.);
 new TH1F("muonNIso_025","Muon Neutral Isolation for cone size 0.25",100,0.,10.);
 new TH1F("muonNIso_030","Muon Neutral Isolation for cone size 0.30",100,0.,10.);
 new TH1F("muonNIso_035","Muon Neutral Isolation for cone size 0.35",100,0.,10.);
 new TH1F("muonNIso_040","Muon Neutral Isolation for cone size 0.40",100,0.,10.);
 new TH1F("muonNIso_045","Muon Neutral Isolation for cone size 0.45",100,0.,10.);
//Pileup 
 new TH1F("muonPuIso_015","Muon Isolation from Pileup for cone size 0.15",100,0.,10.);
 new TH1F("muonPuIso_020","Muon Isolation from Pileup for cone size 0.20",100,0.,10.);
 new TH1F("muonPuIso_025","Muon Isolation from Pileup for cone size 0.25",100,0.,10.);
 new TH1F("muonPuIso_030","Muon Isolation from Pileup for cone size 0.30",100,0.,10.);
 new TH1F("muonPuIso_035","Muon Isolation from Pileup for cone size 0.35",100,0.,10.);
 new TH1F("muonPuIso_040","Muon Isolation from Pileup for cone size 0.40",100,0.,10.);
 new TH1F("muonPuIso_045","Muon Isolation from Pileup for cone size 0.45",100,0.,10.);
//Relative Isolation
 new TH1F("muonrelIso_015","Muon Relative Isolation for cone size 0.15",100,0.,10.);
 new TH1F("muonrelIso_020","Muon Relative Isolation for cone size 0.20",100,0.,10.);
 new TH1F("muonrelIso_025","Muon Relative Isolation for cone size 0.25",100,0.,10.);
 new TH1F("muonrelIso_030","Muon Relative Isolation for cone size 0.30",100,0.,10.);
 new TH1F("muonrelIso_035","Muon Relative Isolation for cone size 0.35",100,0.,10.);
 new TH1F("muonrelIso_040","Muon Relative Isolation for cone size 0.40",100,0.,10.);
 new TH1F("muonrelIso_045","Muon Relative Isolation for cone size 0.45",100,0.,10.);
//Rho Values
 new TH1F("fGridRhoAll","Grid Rho for event",100,0.,100.);
 new TH1F("fGridRhoFastjetAll","Grid Rho for event",100,0.,100.);
 new TH1F("fGridRhoFastjetAllCalo","Grid Rho for event",100,0.,100.);
 new TH1F("fGridRhoFastjetCentralCalo","Grid Rho for event",100,0.,100.);
 new TH1F("fGridRhoFastjetCentralChargedPileUp","Grid Rho for event",100,0.,100.);
 new TH1F("fGridRhoFastjetCentralNeutral","Grid Rho for event",100,0.,100.);
//Charged Isolation vs Rho
 new TProfile("chIso015vsrho", "Charged Isolation 015 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("chIso020vsrho", "Charged Isolation 020 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("chIso025vsrho", "Charged Isolation 025 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("chIso030vsrho", "Charged Isolation 030 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("chIso035vsrho", "Charged Isolation 035 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("chIso040vsrho", "Charged Isolation 040 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("chIso045vsrho", "Charged Isolation 045 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
//Isolation from vs Rho
 new TProfile("puIso015vsrho", "Pileup Isolation 015 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("puIso020vsrho", "Pileup Isolation 020 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("puIso025vsrho", "Pileup Isolation 025 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("puIso030vsrho", "Pileup Isolation 030 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("puIso035vsrho", "Pileup Isolation 035 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("puIso040vsrho", "Pileup Isolation 040 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.); 
 new TProfile("puIso045vsrho", "Pileup Isolation 045 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
//Neutral Isolation vs Rho
 new TProfile("NIso015vsrho", "Neutral Isolation 015 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("NIso020vsrho", "Neutral Isolation 020 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("NIso025vsrho", "Neutral Isolation 025 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("NIso030vsrho", "Neutral Isolation 030 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("NIso035vsrho", "Neutral Isolation 035 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("NIso040vsrho", "Neutral Isolation 040 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("NIso045vsrho", "Neutral Isolation 045 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
//Rho Corrected Isolation
 new TProfile("rhIso015vsrho", "Rho Corrected Isolation 015 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("rhIso020vsrho", "Rho Corrected Isolation 020 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("rhIso025vsrho", "Rho Corrected Isolation 025 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("rhIso030vsrho", "Rho Corrected Isolation 030 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("rhIso035vsrho", "Rho Corrected Isolation 035 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("rhIso040vsrho", "Rho Corrected Isolation 040 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
 new TProfile("rhIso045vsrho", "Rho Corrected Isolation 045 vs fixedGridRhoFastjetAll", 100, 0., 100., 0.,10.);
//Rho Corrected Relative Isolation
 new TH1F("muonRhorelIso_015","Rho Corrected Relative Isolation for cone size 0.15",100,0.,10.);
 new TH1F("muonRhorelIso_020","Rho Corrected Relative Isolation for cone size 0.20",100,0.,10.);
 new TH1F("muonRhorelIso_025","Rho Corrected Relative Isolation for cone size 0.25",100,0.,10.);
 new TH1F("muonRhorelIso_030","Rho Corrected Relative Isolation for cone size 0.30",100,0.,10.);
 new TH1F("muonRhorelIso_035","Rho Corrected Relative Isolation for cone size 0.35",100,0.,10.);
 new TH1F("muonRhorelIso_040","Rho Corrected Relative Isolation for cone size 0.40",100,0.,10.);
 new TH1F("muonRhorelIso_045","Rho Corrected Relative Isolation for cone size 0.45",100,0.,10.);
/////////////////////////////////////////////////Isolation vs NVertex//////////////////////////////////////
//Charged Isolation vs NVertex
 new TProfile("chIso015vsnVtx", "Charged Isolation 015 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("chIso020vsnVtx", "Charged Isolation 020 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("chIso025vsnVtx", "Charged Isolation 025 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("chIso030vsnVtx", "Charged Isolation 030 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("chIso035vsnVtx", "Charged Isolation 035 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("chIso040vsnVtx", "Charged Isolation 040 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("chIso045vsnVtx", "Charged Isolation 045 vs nVertex", 80, 0, 80, 0.,5.);
//Isolation from vs NVertex
 new TProfile("puIso015vsnVtx", "Pileup Isolation 015 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("puIso020vsnVtx", "Pileup Isolation 020 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("puIso025vsnVtx", "Pileup Isolation 025 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("puIso030vsnVtx", "Pileup Isolation 030 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("puIso035vsnVtx", "Pileup Isolation 035 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("puIso040vsnVtx", "Pileup Isolation 040 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("puIso045vsnVtx", "Pileup Isolation 045 vs nVertex", 80, 0, 80, 0.,5.);
//Neutral Isolation vs NVertex
 new TProfile("NIso015vsnVtx", "Neutral Isolation 015 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("NIso020vsnVtx", "Neutral Isolation 020 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("NIso025vsnVtx", "Neutral Isolation 025 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("NIso030vsnVtx", "Neutral Isolation 030 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("NIso035vsnVtx", "Neutral Isolation 035 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("NIso040vsnVtx", "Neutral Isolation 040 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("NIso045vsnVtx", "Neutral Isolation 045 vs nVertex", 80, 0, 80, 0.,5.);
//Rho Corrected Isolation vs NVertex
 new TProfile("rhIso015vsnVtx", "Rho Corrected Relative Isolation 015 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("rhIso020vsnVtx", "Rho Corrected Relative Isolation 020 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("rhIso025vsnVtx", "Rho Corrected Relative Isolation 025 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("rhIso030vsnVtx", "Rho Corrected Relative Isolation 030 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("rhIso035vsnVtx", "Rho Corrected Relative Isolation 035 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("rhIso040vsnVtx", "Rho Corrected Relative Isolation 040 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("rhIso045vsnVtx", "Rho Corrected Relative Isolation 045 vs nVertex", 80, 0, 80, 0.,5.);
//Delta Beta Corrected Isolation vs NVertex
 new TProfile("dbIsoraw015vsnVtx", "Delta-beta Corrected Raw Isolation 015 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIsoraw020vsnVtx", "Delta-beta Corrected Raw Isolation 020 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIsoraw025vsnVtx", "Delta-beta Corrected Raw Isolation 025 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIsoraw030vsnVtx", "Delta-beta Corrected Raw Isolation 030 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIsoraw035vsnVtx", "Delta-beta Corrected Raw Isolation 035 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIsoraw040vsnVtx", "Delta-beta Corrected Raw Isolation 040 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIsoraw045vsnVtx", "Delta-beta Corrected Raw Isolation 045 vs nVertex", 80, 0, 80, 0.,5.);
//Delta Beta Corrected Isolation vs NVertex
 new TProfile("dbIso015vsnVtx", "Delta-beta Corrected Relative Isolation 015 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIso020vsnVtx", "Delta-beta Corrected Relative Isolation 020 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIso025vsnVtx", "Delta-beta Corrected Relative Isolation 025 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIso030vsnVtx", "Delta-beta Corrected Relative Isolation 030 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIso035vsnVtx", "Delta-beta Corrected Relative Isolation 035 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIso040vsnVtx", "Delta-beta Corrected Relative Isolation 040 vs nVertex", 80, 0, 80, 0.,5.);
 new TProfile("dbIso045vsnVtx", "Delta-beta Corrected Relative Isolation 045 vs nVertex", 80, 0, 80, 0.,5.);
}
//---------------------------------
// Read Slope from NIso vs Rho fits
//---------------------------------
void MuonIsolation::readRhofitSlope() {
 rhisoSlope["c15"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC15");
 rhisoSlope["c20"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC20");
 rhisoSlope["c25"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC25");
 rhisoSlope["c30"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC30");
 rhisoSlope["c35"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC35");
 rhisoSlope["c40"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC40");
 rhisoSlope["c45"]=AnaUtil::cutValue(muonCutMap(), "rhoIsoC45");
}

// -------------------
// The main event loop
// -------------------
void MuonIsolation::clearLists() {
 vtxList.clear();
 eventMuons.clear();
}
void MuonIsolation::eventLoop() 
{
  readRhofitSlope();
  for(auto& p:rhisoSlope) {
    std::cout<<p.first<<">>>"<<p.second<<std::endl;
  }
  // Initialize analysis
  if (!beginJob()) return;
  int nPrint = max(10000, nEvents()/1000);

  Options op;
  op.verbose = false;
  op.usesbit = true;  // Crucial
  op.printselected = false;
  
  
  // --------------------
  // Start the event loop
  // --------------------
  string lastFile;
  //long int nRecoMuons=0,nGoodRecoMuons=0;
  std::cout<<"Bunch Crossing>>>>"<<bunchCrossing()<<std::endl;
  for (int ev = 0; ev < nEvents(); ++ev) {
    clearEvent();
    clearLists();
    int lflag = chain()->LoadTree(ev); 
    int nbytes = getEntry(lflag);    // returns total bytes read

    string currentFile(gSystem->BaseName(chain()->GetCurrentFile()->GetName())); 

    const Event& evt = eventColl()->at(0);

    histf()->cd();

    //For data or for MC without pileup
    puevWt_ = 1;
    /*
    if (isMC()) {
      int npu = 0;
      puevWt_ = wtPileUp(npu);
    }
    */
    // Show status of the run
    int run   = evt.run;
    int event = evt.event;
    int lumis = evt.lumis;

    // Show status of the run
    if (currentFile != lastFile) 
    cout << "Tree# " << setw(4) << chain()->GetTreeNumber()  
         << " ==> " << currentFile 
         << " <<< Run# " << run
         << " Lumis# " << lumis
         << " Event# " << setw(8) << event << " >>> " 
         << " Events proc. " << setw(8) << ev 
         << endl;
    lastFile = currentFile;

    // Show the status 
    if (ev%nPrint == 0) 
    cout << "Tree# " << setw(4) << chain()->GetTreeNumber()  
         << " ==> " << chain()->GetCurrentFile()->GetName() 
         << " <<< Run# " << run 
         << " Lumis# " << lumis
         << " Event# " << setw(8) << event << " >>> " 
         << " Events proc. " << setw(8) << ev 
         << endl;

   op.verbose = (logOption() >> 1 & 0x1); 
   findVtxInfo(vtxList, op, fLog());
   double ngoodVtx=vtxList.size();
   AnaUtil::fillHist1D("nGoodvtx",ngoodVtx,1);
   // AnaUtil::fillHist1D("evcounter", 0, _puevWt);
   AnaUtil::fillHist1D("fGridRhoAll",evt.fGridRhoAll,1);
   AnaUtil::fillHist1D("fGridRhoFastjetAll",evt.fGridRhoFastjetAll,1);
   AnaUtil::fillHist1D("fGridRhoFastjetAllCalo",evt.fGridRhoFastjetAllCalo,1);
   AnaUtil::fillHist1D("fGridRhoFastjetCentralCalo",evt.fGridRhoFastjetCentralCalo,1);
   AnaUtil::fillHist1D("fGridRhoFastjetCentralChargedPileUp",evt.fGridRhoFastjetCentralChargedPileUp,1);
   AnaUtil::fillHist1D("fGridRhoFastjetCentralNeutral",evt.fGridRhoFastjetCentralNeutral,1);
   if(!muonColl()->empty())
     AnaUtil::fillHist1D("nRecomuon",muonColl()->size(),1);
   int ngoodmu=0;
   for (auto it = muonColl()->begin(); it != muonColl()->end(); ++it) {
     const Muon& muon = (*it);
     if (abs(muon.eta) >= AnaUtil::cutValue(muonCutMap(), "eta"))                      continue;
     if (muon.pt < AnaUtil::cutValue(muonCutMap(), "pt"))                            continue;
     if (!muon.isTrackerMuon)                                                         continue;
     if (!muon.isGlobalMuonPromptTight)                                               continue;
     if (muon.nChambers < AnaUtil::cutValue(muonCutMap(), "nChambers"))                continue;
     if (muon.nMatches < AnaUtil::cutValue(muonCutMap(), "nMatches"))                  continue;
     if (muon.nMatchedStations < AnaUtil::cutValue(muonCutMap(), "nMatchedStations"))  continue; 
     if (muon.pixHits < AnaUtil::cutValue(muonCutMap(), "pixHits"))                    continue;
     if (muon.trkHits < AnaUtil::cutValue(muonCutMap(), "trkHits"))                    continue;
     if (muon.globalChi2 >= AnaUtil::cutValue(muonCutMap(),"globalChi2"))              continue;
     if (abs(muon.trkD0) >= AnaUtil::cutValue(muonCutMap(),"trkD0"))                   continue;
     ngoodmu++;
     //for(auto &mm : muon.isolationMap) {
     // std::cout<<mm.first << std::endl;
     // }

     AnaUtil::fillHist1D("muon1Pt",muon.pt,1);
     AnaUtil::fillHist1D("muon1Eta",muon.eta,1);
     
     AnaUtil::fillProfile("muPtvsnVtx",ngoodVtx,muon.pt);
     if(muon.isolationMap.find("c15") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_015",muon.isolationMap.at("c15").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_015",muon.isolationMap.at("c15").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_015",muon.isolationMap.at("c15").at(2)/muon.pt,1);
       // do deltaBeta
       double iso = muon.isolationMap.at("c15").at(0) + std::max(0.0, muon.isolationMap.at("c15").at(1)-AnaUtil::cutValue(muonCutMap(), "db015")*muon.isolationMap.at("c15").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt015"));
       AnaUtil::fillProfile("dbIso015vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw015vsnVtx",ngoodVtx,iso);
       AnaUtil::fillHist1D("muonrelIso_015",iso/muon.pt,1);
       AnaUtil::fillProfile("chIso015vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c15").at(0));
       AnaUtil::fillProfile("NIso015vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c15").at(1));
       AnaUtil::fillProfile("puIso015vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c15").at(2));
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c15").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c15").at(1)-rhisoSlope["c15"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso015vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_015",rhoIso/muon.pt,1);   
       //Vs NVertex
       AnaUtil::fillProfile("chIso015vsnVtx",ngoodVtx,muon.isolationMap.at("c15").at(0));
       AnaUtil::fillProfile("NIso015vsnVtx",ngoodVtx,muon.isolationMap.at("c15").at(1));
       AnaUtil::fillProfile("puIso015vsnVtx",ngoodVtx,muon.isolationMap.at("c15").at(2));    
       AnaUtil::fillProfile("rhIso015vsnVtx",ngoodVtx,rhoIso/muon.pt);
     }
     if(muon.isolationMap.find("c20") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_020",muon.isolationMap.at("c20").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_020",muon.isolationMap.at("c20").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_020",muon.isolationMap.at("c20").at(2)/muon.pt,1);
       // do deltaBeta
       double iso = muon.isolationMap.at("c20").at(0) + std::max(0.0, muon.isolationMap.at("c20").at(1)-AnaUtil::cutValue(muonCutMap(), "db020")*muon.isolationMap.at("c20").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt020"));
       AnaUtil::fillProfile("dbIso020vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw020vsnVtx",ngoodVtx,iso);
       
       AnaUtil::fillHist1D("muonrelIso_020",iso/muon.pt,1);
       AnaUtil::fillProfile("chIso020vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c20").at(0));
       AnaUtil::fillProfile("NIso020vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c20").at(1));
       AnaUtil::fillProfile("puIso020vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c20").at(2));
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c20").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c20").at(1)-rhisoSlope["c20"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso020vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_020",rhoIso/muon.pt,1); 
       //Vs NVertex
       AnaUtil::fillProfile("chIso020vsnVtx",ngoodVtx,muon.isolationMap.at("c20").at(0));
       AnaUtil::fillProfile("NIso020vsnVtx",ngoodVtx,muon.isolationMap.at("c20").at(1));
       AnaUtil::fillProfile("puIso020vsnVtx",ngoodVtx,muon.isolationMap.at("c20").at(2));    
       AnaUtil::fillProfile("rhIso020vsnVtx",ngoodVtx,rhoIso/muon.pt);
     }
     if(muon.isolationMap.find("c25") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_025",muon.isolationMap.at("c25").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_025",muon.isolationMap.at("c25").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_025",muon.isolationMap.at("c25").at(2)/muon.pt,1);
       // do deltaBeta
       double iso = muon.isolationMap.at("c25").at(0) + std::max(0.0, muon.isolationMap.at("c25").at(1)-AnaUtil::cutValue(muonCutMap(), "db025")*muon.isolationMap.at("c25").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt025"));

       AnaUtil::fillProfile("dbIso025vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw025vsnVtx",ngoodVtx,iso);
       AnaUtil::fillHist1D("muonrelIso_025",iso/muon.pt,1);

       AnaUtil::fillProfile("chIso025vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c25").at(0));
       AnaUtil::fillProfile("NIso025vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c25").at(1));
       AnaUtil::fillProfile("puIso025vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c25").at(2));
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c25").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c25").at(1)-rhisoSlope["c25"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso025vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_025",rhoIso/muon.pt,1);   
       //Vs NVertex
       AnaUtil::fillProfile("chIso025vsnVtx",ngoodVtx,muon.isolationMap.at("c25").at(0));
       AnaUtil::fillProfile("NIso025vsnVtx",ngoodVtx,muon.isolationMap.at("c25").at(1));
       AnaUtil::fillProfile("puIso025vsnVtx",ngoodVtx,muon.isolationMap.at("c25").at(2));    
       AnaUtil::fillProfile("rhIso025vsnVtx",ngoodVtx,rhoIso/muon.pt);
     }
     if(muon.isolationMap.find("c30") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_030",muon.isolationMap.at("c30").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_030",muon.isolationMap.at("c30").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_030",muon.isolationMap.at("c30").at(2)/muon.pt,1);
        // do deltaBeta
       double iso = muon.isolationMap.at("c30").at(0) + std::max(0.0, muon.isolationMap.at("c30").at(1)-AnaUtil::cutValue(muonCutMap(), "db030")*muon.isolationMap.at("c30").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt030"));
 
       AnaUtil::fillProfile("dbIso030vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw030vsnVtx",ngoodVtx,iso);
       AnaUtil::fillHist1D("muonrelIso_030",iso/muon.pt,1);

       AnaUtil::fillProfile("chIso030vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c30").at(0));
       AnaUtil::fillProfile("NIso030vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c30").at(1));
       AnaUtil::fillProfile("puIso030vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c30").at(2));
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c30").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c30").at(1)-rhisoSlope["c30"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso030vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_030",rhoIso/muon.pt,1);  
       //Vs NVertex
       AnaUtil::fillProfile("chIso030vsnVtx",ngoodVtx,muon.isolationMap.at("c30").at(0));
       AnaUtil::fillProfile("NIso030vsnVtx",ngoodVtx,muon.isolationMap.at("c30").at(1));
       AnaUtil::fillProfile("puIso030vsnVtx",ngoodVtx,muon.isolationMap.at("c30").at(2));    
       AnaUtil::fillProfile("rhIso030vsnVtx",ngoodVtx,rhoIso/muon.pt);
     }
     if(muon.isolationMap.find("c35") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_035",muon.isolationMap.at("c35").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_035",muon.isolationMap.at("c35").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_035",muon.isolationMap.at("c35").at(2)/muon.pt,1);     
       // do deltaBeta
       double iso = muon.isolationMap.at("c35").at(0) + std::max(0.0, muon.isolationMap.at("c35").at(1)-AnaUtil::cutValue(muonCutMap(), "db035")*muon.isolationMap.at("c35").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt035"));

       AnaUtil::fillProfile("dbIso035vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw035vsnVtx",ngoodVtx,iso);
       AnaUtil::fillHist1D("muonrelIso_035",iso/muon.pt,1);

       AnaUtil::fillProfile("chIso035vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c35").at(0));
       AnaUtil::fillProfile("NIso035vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c35").at(1));
       AnaUtil::fillProfile("puIso035vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c35").at(2));
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c35").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c35").at(1)-rhisoSlope["c35"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso035vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_035",rhoIso/muon.pt,1);      
       //Vs NVertex
       AnaUtil::fillProfile("chIso035vsnVtx",ngoodVtx,muon.isolationMap.at("c35").at(0));
       AnaUtil::fillProfile("NIso035vsnVtx",ngoodVtx,muon.isolationMap.at("c35").at(1));
       AnaUtil::fillProfile("puIso035vsnVtx",ngoodVtx,muon.isolationMap.at("c35").at(2));    
       AnaUtil::fillProfile("rhIso035vsnVtx",ngoodVtx,rhoIso/muon.pt);
     }
     if(muon.isolationMap.find("c40") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_040",muon.isolationMap.at("c40").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_040",muon.isolationMap.at("c40").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_040",muon.isolationMap.at("c40").at(2)/muon.pt,1);
        // do deltaBeta
       double iso = muon.isolationMap.at("c40").at(0) + std::max(0.0, muon.isolationMap.at("c40").at(1)-AnaUtil::cutValue(muonCutMap(), "db040")*muon.isolationMap.at("c40").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt040"));

       AnaUtil::fillProfile("dbIso040vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw040vsnVtx",ngoodVtx,iso);

       
       AnaUtil::fillProfile("chIso040vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c40").at(0));
       AnaUtil::fillProfile("NIso040vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c40").at(1));
       AnaUtil::fillProfile("puIso040vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c40").at(2));     
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c40").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c40").at(1)-rhisoSlope["c40"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso040vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_040",rhoIso/muon.pt,1);       
       //Vs NVertex
       AnaUtil::fillProfile("chIso040vsnVtx",ngoodVtx,muon.isolationMap.at("c40").at(0));
       AnaUtil::fillProfile("NIso040vsnVtx",ngoodVtx,muon.isolationMap.at("c40").at(1));
       AnaUtil::fillProfile("puIso040vsnVtx",ngoodVtx,muon.isolationMap.at("c40").at(2));    
       AnaUtil::fillProfile("rhIso040vsnVtx",ngoodVtx,rhoIso/muon.pt);
    }
    if(muon.isolationMap.find("c45") != muon.isolationMap.end() ) {
       AnaUtil::fillHist1D("muonChIso_045",muon.isolationMap.at("c45").at(0)/muon.pt,1);
       AnaUtil::fillHist1D("muonNIso_045",muon.isolationMap.at("c45").at(1)/muon.pt,1);
       AnaUtil::fillHist1D("muonPuIso_045",muon.isolationMap.at("c45").at(2)/muon.pt,1);
       // do deltaBeta
       double iso = muon.isolationMap.at("c45").at(0) + std::max(0.0, muon.isolationMap.at("c45").at(1)-AnaUtil::cutValue(muonCutMap(), "db045")*muon.isolationMap.at("c45").at(2)-AnaUtil::cutValue(muonCutMap(), "dbInt045"));
 
       AnaUtil::fillProfile("dbIso045vsnVtx",ngoodVtx,iso/muon.pt);
       AnaUtil::fillProfile("dbIsoraw045vsnVtx",ngoodVtx,iso);
       AnaUtil::fillHist1D("muonrelIso_045",iso/muon.pt,1);
       
       AnaUtil::fillProfile("chIso045vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c45").at(0));
       AnaUtil::fillProfile("NIso045vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c45").at(1));
       AnaUtil::fillProfile("puIso045vsrho",evt.fGridRhoFastjetAll,muon.isolationMap.at("c45").at(2));     
       //do rho Correction
       double rhoIso=muon.isolationMap.at("c45").at(0) + 
                     std::max(0.0, muon.isolationMap.at("c45").at(1)-rhisoSlope["c45"]*evt.fGridRhoFastjetAll);
       AnaUtil::fillProfile("rhIso045vsrho",evt.fGridRhoFastjetAll,rhoIso);
       AnaUtil::fillHist1D("muonRhorelIso_045",rhoIso/muon.pt,1);
       //Vs NVertex
       AnaUtil::fillProfile("chIso045vsnVtx",ngoodVtx,muon.isolationMap.at("c45").at(0));
       AnaUtil::fillProfile("NIso045vsnVtx",ngoodVtx,muon.isolationMap.at("c45").at(1));
       AnaUtil::fillProfile("puIso045vsnVtx",ngoodVtx,muon.isolationMap.at("c45").at(2));    
       AnaUtil::fillProfile("rhIso045vsnVtx",ngoodVtx,rhoIso/muon.pt);
    }
   }
   if(ngoodmu > 0)
     AnaUtil::fillHist1D("nGoodmuon",ngoodmu,1);
  }  
  // Analysis is over
  endJob();
}

void MuonIsolation::endJob() {

  closeFiles();

  histf()->cd();
  histf()->Write();
  histf()->Close();
  delete histf();
}
