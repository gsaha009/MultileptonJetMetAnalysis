/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if( !muVec.empty() ) {
          AnaUtil::fillHist1D("nGoodmuon",muVec.size(),1);
            std::sort(muVec.begin(),muVec.end(),PtComparator<vhtm::Muon>());
          Z1present=Z1Selector<vhtm::Muon>(muVec,Z1mu);
        //new method
        //std::cout<<"Event Loop Point 1>>muVec.size="<<muVec.size()<<std::endl;
       // if(muVec.size()>=2) {std::cout<<"Event Loop Point 1a"<<std::endl;
          ZSelector<vhtm::Muon>(muVec);
       // }
        }
        if( !eleVec.empty() ) {
          AnaUtil::fillHist1D("nGoodelectron",eleVec.size(),1);
            std::sort(eleVec.begin(),eleVec.end(),PtComparator<vhtm::Electron>());
          Z1present=Z1Selector<vhtm::Electron>(eleVec,Z1ele);
            //std::cout<<"Evemt Loop Point 2>>eleVec.size="<<eleVec.size()<<std::endl;
         //   if(eleVec.size()>=2) {std::cout<<"Event Loop Point 2a"<<std::endl;
              ZSelector<vhtm::Electron>(eleVec);
         //   }
        }
        int nGoogele=eleVec.size();
        int nGoodmu=muVec.size();

        if( Z1mu.empty() && Z1ele.empty() ) continue;
        if( !Z1mu.empty() && !Z1ele.empty() ) {
          nZ1clash++;
          TLorentzVector m1,m2,e1,e2;
          m1.SetPtEtaPhiE(Z1mu[0].first.pt,Z1mu[0].first.eta,Z1mu[0].first.phi,Z1mu[0].first.energy); 
          m2.SetPtEtaPhiE(Z1mu[0].second.pt,Z1mu[0].second.eta,Z1mu[0].second.phi,Z1mu[0].second.energy); 
          e1.SetPtEtaPhiE(Z1ele[0].first.pt,Z1ele[0].first.eta,Z1ele[0].first.phi,Z1ele[0].first.energy); 
          e2.SetPtEtaPhiE(Z1ele[0].second.pt,Z1ele[0].second.eta,Z1ele[0].second.phi,Z1ele[0].second.energy); 
          if( std::fabs( (m1+m2).M()-MZnominal ) < std::fabs( (e1+e2).M()-MZnominal ) )
            Z1ele.clear();
          else
            Z1mu.clear();
        }
        if( !Z1mu.empty() && Z1ele.empty() ) {
           AnaUtil::fillHist1D("nZ1mumu",1,1);
           Z1tomu=true;
        } 
        if( Z1mu.empty() && !Z1ele.empty() ) {
           AnaUtil::fillHist1D("nZ1ee",1,1);
           Z1toele=true;
        }
        //if(Z1tomu)  plotZmass<vhtm::Muon>("massZ1",Z1mu[0]);
        //if(Z1toele) plotZmass<vhtm::Electron>("massZ1",Z1ele[0]);

        if(Z1present) {
          if( Z1tomu ) {
            plotZmass<vhtm::Muon>("massZ1",Z1mu[0]);
              bool x1=false,x2=false;
            if( nGoodmu >= 4 ) 
              x1=Z2Selector<vhtm::Muon,vhtm::Muon>(Z1mu,Z2mu,muVec);
            if( nGoogele >= 2)
              x2=Z2Selector<vhtm::Muon,vhtm::Electron>(Z1mu,Z2ele,eleVec);
              if(x1||x2) Z2present=true;
          }
          else if( Z1toele ) {
            plotZmass<vhtm::Electron>("massZ1",Z1ele[0]);
              bool x1=false,x2=false;
            if( nGoodmu >= 2 ) 
              x1=Z2Selector<vhtm::Electron,vhtm::Muon>(Z1ele,Z2mu,muVec);
            if( nGoogele >= 4) 
              x2=Z2Selector<vhtm::Electron,vhtm::Electron>(Z1ele,Z2ele,eleVec);
              if(x1||x2) Z2present=true;
          }
          if( Z2present ) {
            if( !Z2mu.empty() || !Z2ele.empty() ) {
              if( !Z2mu.empty() ) {
                plotZmass<vhtm::Muon>("massZ2",Z2mu[0]);
                if(Z1tomu) {
                  n4mu++; 
                  plotHmass<vhtm::Muon,vhtm::Muon>(Z1mu[0],Z2mu[0]);
                  AnaUtil::fillHist1D("Z1flav",0,1);
                  AnaUtil::fillHist1D("Z2flav",0,1);
                  AnaUtil::fillHist1D("Evflav",1,1);//4mu
                }
                else if(Z1toele) {
                  n2e2mu++;
                  plotHmass<vhtm::Electron,vhtm::Muon>(Z1ele[0],Z2mu[0]);
                  AnaUtil::fillHist1D("Z1flav",1,1);
                  AnaUtil::fillHist1D("Z2flav",0,1);
                  AnaUtil::fillHist1D("Evflav",5,1);
                }
              }
              else if( !Z2ele.empty() ) {
                plotZmass<vhtm::Electron>("massZ2",Z2ele[0]);
                if(Z1tomu) {
                  n2e2mu++;
                  plotHmass<vhtm::Muon,vhtm::Electron>(Z1mu[0],Z2ele[0]);
                  AnaUtil::fillHist1D("Z1flav",0,1);
                  AnaUtil::fillHist1D("Z2flav",1,1);
                  AnaUtil::fillHist1D("Evflav",5,1);
                }
                else if(Z1toele) {
                  n4e++;
                  plotHmass<vhtm::Electron,vhtm::Electron>(Z1ele[0],Z2ele[0]);
                  AnaUtil::fillHist1D("Z1flav",1,1);
                  AnaUtil::fillHist1D("Z2flav",1,1);
                  AnaUtil::fillHist1D("Evflav",3,1);
                }
              }
            } 
          }
         } 
//////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
bool EventSelection::Z1Selector(const std::vector<T>& lepVec,std::vector< std::pair<T,T> >& Z1) {
//Z1 selection loop:: Z1 selection is based on how close mupair mass is close
//to nominal Z mass
 std::pair<T,T> Z1temp;
 //double MZ1=0.;
 bool Z1found=false;
 for(auto& mu1: lepVec ) {
   TLorentzVector mu1P4;
   mu1P4.SetPtEtaPhiE(mu1.pt,mu1.eta,mu1.phi,mu1.energy);
   for(auto& mu2: lepVec ) {
     if( mu1.charge + mu2.charge != 0) continue;
     //std::cout<<"Opp charged lepton found>>>"<<std::endl;
     TLorentzVector mu2P4;
     mu2P4.SetPtEtaPhiE(mu2.pt,mu2.eta,mu2.phi,mu2.energy);
     double MZ1temp=(mu1P4+mu2P4).M();
     if( MZ1temp >= AnaUtil::cutValue(evselCutMap(),"mZ1lowbound") && MZ1temp <= AnaUtil::cutValue(evselCutMap(),"mZ1upperbound") ) {
       Z1found=true;
       //std::cout<<"Z1 mass ok>>>"<<std::endl;
       //std::cout<<"MZnominal"<<MZnominal<<std::endl;
       if( std::fabs(MZ1temp-MZnominal) < Mzdiff ) {
         Mzdiff=std::fabs(MZ1temp-MZnominal);
         Z1temp=std::make_pair(mu1,mu2);
         //std::cout<<"MZ1temp>>>"<<MZ1temp<<std::endl;
       }
     }
   }
 }
 Z1.push_back(Z1temp);
 return Z1found;
}

//---
//Function to select a Z2 once a Z1 is found 
//---
template <typename T1,typename T2>
bool EventSelection::Z2Selector(std::vector< std::pair<T1,T1> >& Z1,std::vector< std::pair<T2,T2> >& Z2,const std::vector<T2>& lepVec) {
// double MZ2=0.;
 bool Z2found=false;
 std::pair<T2,T2> Z2temp;
 TLorentzVector Z1l1,Z1l2;
 Z1l1.SetPtEtaPhiE(Z1[0].first.pt,Z1[0].first.eta,Z1[0].first.phi,Z1[0].first.energy);
 Z1l2.SetPtEtaPhiE(Z1[0].second.pt,Z1[0].second.eta,Z1[0].second.phi,Z1[0].second.energy);
 for(auto& mu1: lepVec ) {
   TLorentzVector mu1P4;
   mu1P4.SetPtEtaPhiE(mu1.pt,mu1.eta,mu1.phi,mu1.energy);
   if( mu1P4==Z1l1 || mu1P4==Z1l2 ) continue; 
   for(auto& mu2: lepVec ) {
     TLorentzVector mu2P4;
     mu2P4.SetPtEtaPhiE(mu2.pt,mu2.eta,mu2.phi,mu2.energy);
     if( (mu2P4==Z1l1 || mu2P4==Z1l2) || mu1.charge + mu2.charge != 0) continue;
     double MZ2temp=(mu1P4+mu2P4).M();
     if( MZ2temp >= AnaUtil::cutValue(evselCutMap(),"mZ2lowbound") && MZ2temp <= AnaUtil::cutValue(evselCutMap(),"mZ2upperbound") ) {
       Z2found=true;
       if( Z2.empty() ) {
         Z2temp=std::make_pair(mu1,mu2);
	 Z2.push_back(Z2temp);
	}
       else {
         if( ( mu1.charge == Z2[0].first.charge && mu1.pt > Z2[0].first.pt ) ||
             ( mu1.charge == Z2[0].second.charge && mu1.pt > Z2[0].second.pt ) ||
             ( mu2.charge == Z2[0].first.charge && mu2.pt > Z2[0].first.pt ) ||
             ( mu2.charge == Z2[0].second.charge && mu2.pt > Z2[0].second.pt )
           )
            Z2temp=std::make_pair(mu1,mu2);
            Z2.clear();
            Z2.push_back(Z2temp);
       }
     }
   }
 } 
 return Z2found;
}
//---
//Function to plot Z mass
//---
template <typename T>
void EventSelection::plotZmass(std::string ztype,std::pair<T,T> Z) {
 TLorentzVector l1,l2;
 l1.SetPtEtaPhiE(Z.first.pt,Z.first.eta,Z.first.phi,Z.first.energy);
 l2.SetPtEtaPhiE(Z.second.pt,Z.second.eta,Z.second.phi,Z.second.energy);
 //cout<<(l1+l2).M()<<std::endl;
 AnaUtil::fillHist1D(ztype,(l1+l2).M(),1);
}
//---
//Function to plot H mass
//---
template <typename T1,typename T2>
void EventSelection::plotHmass(std::pair<T1,T1> Z1,std::pair<T2,T2> Z2) {
  TLorentzVector l1,l2,l3,l4;
  l1.SetPtEtaPhiE(Z1.first.pt,Z1.first.eta,Z1.first.phi,Z1.first.energy);
  l2.SetPtEtaPhiE(Z1.second.pt,Z1.second.eta,Z1.second.phi,Z1.second.energy);
  l3.SetPtEtaPhiE(Z2.first.pt,Z2.first.eta,Z2.first.phi,Z2.first.energy);
  l4.SetPtEtaPhiE(Z2.second.pt,Z2.second.eta,Z2.second.phi,Z2.second.energy);
    //TLorentzVector Z1p=l1+l2;
    //TLorentzVector Z2p=l3+l4;
  std::vector<TLorentzVector> lvec;
    lvec.push_back(l1);
    lvec.push_back(l2);
    lvec.push_back(l3);
    lvec.push_back(l4);
    std::sort(lvec.begin(),lvec.end(),PtComparatorTL<TLorentzVector>());
    //std::cout<<"sorted pt"<<std::endl;
    //for (int i =0; i<lvec.size(); i++) {
    //    std::cout<<"/"<<lvec[i].Pt();
    //}
    //std::cout<<endl;
    bool c1=(Z1.first.charge + Z2.first.charge == 0 && (l1+l3).M() > 4.) || (Z1.first.charge + Z2.second.charge == 0 && (l1+l4).M() > 4.);
    bool c2=(Z1.second.charge + Z2.first.charge == 0 && (l2+l3).M() > 4.) || (Z1.second.charge + Z2.second.charge == 0 && (l2+l4).M() > 4.);
    if ( lvec[0].Pt() > 20. && lvec[1].Pt() > 10. ) {
        if ( c1 && c2 ) {
          AnaUtil::fillHist1D("l1Pt",lvec[0].Pt(),1);
          AnaUtil::fillHist1D("l2Pt",lvec[1].Pt(),1);
          AnaUtil::fillHist1D("l3Pt",lvec[2].Pt(),1);
          AnaUtil::fillHist1D("l4Pt",lvec[3].Pt(),1);
          AnaUtil::fillHist1D("massH",(l1+l2+l3+l4).M(),1);
        }
    }
    

}


